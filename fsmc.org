#+TITLE: The Finite State Machine Converter
#+AUTHOR: Titan
#+EMAIL: howay.tan@gmail.com
#+DATE: <2019-02-13 Wed>
#+KEYWORDS: fsm finite-state-machine converter
#+OPTIONS: H:4 toc:t
#+STARTUP: indent
#+SUBTITLE: A tool to convert finite state machine from one format to another
#+titlepage: true
#+titlepage-color: 06386e
#+titlepage-text-color: FFFFFF
#+titlepage-rule-color: FFFFFF
#+titlepage-rule-height: 1

* Core Logic
** Framework
#+begin_src python :tangle ${BUILDDIR}/fsmc.py
  #! /usr/bin/python
  import jsonio
  import python
  import excel
  import table
  import pony
  import nim
  import plantuml

  importers = {
    'json': jsonio.load,
    'excel': excel.load,
    'xls': excel.load,
    'xlsx': excel.load,
    'txt': table.load,
    'table': table.load,
  }

  exporters = {
    'py': python.save,
    'python': python.save,
    'json': jsonio.save,
    'excel': excel.save,
    'xls': excel.save,
    'xlsx': excel.save,
    'table': table.save,
    'txt': table.save,
    'pony': pony.save,
    'nim': nim.save,
    'plantuml': plantuml.save,
  }

  def main(args):
    import os
    from os.path import dirname, exists, join, split
    <<extract-arguments>>
    <<mkdir>>
    (variables, states) = importers[fronn](input)
    exporters[to](output, variables, states, args)

  if __name__ == '__main__':
    import argparse
    import sys
    parser = argparse.ArgumentParser()
    <<argument-definations>>
    args = parser.parse_args()
    main(args)
#+end_src
** Command Line Arguments
| argument | type    | usage                                                                   |
|----------+---------+-------------------------------------------------------------------------|
| --from   | string  | specify the current from of the filename from which should be converted |
| --to     | string  | specify the format to which the filename should be converted            |
| --output | string  | specify the filename to save converted result                           |
| --debug  | boolean | whether to output debug information                                     |
| input    | string  | specify the filename to be converted                                    |

#+begin_src python :noweb-ref argument-definations
  parser.add_argument('-f', '--from', dest='fronn', help='specify the current from of the filename from which should be converted')
  parser.add_argument('-t', '--to', help='specify the format to which the filename should be converted')
  parser.add_argument('-o', '--output', help='specify the filename to save converted result')
  parser.add_argument('--debug', action='store_true', help='whether to output debug information')
  parser.add_argument('input', help='specify the filename to be converted')
#+end_src
*** Extract arguments
#+begin_src python :noweb-ref extract-arguments
  fronn = args.fronn
  to = args.to
  output = args.output
  input = args.input

  if not to and not output:
    print('Missing --to or --output')
    exit(1)
  elif not to:
    (_, ext) = os.path.splitext(output)
    if not ext or ext[1:] not in exporters:
      print('Unsupported converted file extension: %s' % (ext if ext else ''))
      exit(1)
    else:
      to = ext[1:]
  elif not output:
    if to not in exporters:
      print('Unsupported converted file format: %s' % to)
      exit(1)
    (path, _) = os.path.splitext(input)
    output = path + '.' + to
  else:
    if to not in exporters:
      print('Unsupported converted file format: %s' % to)
      exit(1)

  if fronn:
    if fronn not in importers:
      print('Unsupported converting file format: %s' % fronn)
  else:
    (_, ext) = os.path.splitext(input)
    if not ext or ext[1:] not in importers:
      print('Unsupported converting file extension: %s' % (ext if ext else ''))
      exit(1)
    else:
      fronn = ext[1:]
#+end_src
*** mkdir
#+begin_src python :noweb-ref mkdir
  (h0, t0) = split(output)
  (h1, t1) = split(h0)
  dirs = []
  while h0 != h1:
    dirs.append(t1)
    h0 = h1
    (h1, t1) = split(h0)
  if output.startswith("/") or output.startswith("\\"):
    target = output[0]
  else:
    target = ""
  for dir in reversed(dirs):
    target = join(target, dir)
    if not exists(target):
      os.mkdir(target)
#+end_src
