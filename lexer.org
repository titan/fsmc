#+STARTUP: indent

* lexer
** framework
#+begin_src python :tangle ${BUILDDIR}/lexer.py
  from typing import List, NewType, Union
  from abc import ABC, abstractmethod
  from lexer_fsm import ActionDelegate as LexerActionDelegate, GuardDelegate as LexerGuardDelegate, VariableDelegate as LexerVariableDelegate, StateMachine as LexerStateMachine
  from semantic import Expression, Assignment, Identifier, Literal, Delimiter, Call, Var, Type, UnionType, ListType, MapType

  <<lexer-adapter>>


  <<lexer-context>>


  <<lexer-action-delegate>>


  <<lexer-guard-delegate>>


  <<lexer-variable-delegate>>


  class Lexer:
    def __init__(self, adapter: LexerAdapter = None):
      self._fsm = LexerStateMachine(_LexerActionDelegate(), _LexerGuardDelegate(), _LexerVariableDelegate(adapter))
      self._ctx = _LexerContext()

    def feed(self, ch):
      if ch == '\r' or ch == '\n':
        self._fsm.new_line(self._ctx)
      else:
        self._fsm.input(self._ctx, ch)

    def eof(self):
      self._fsm.eof(self._ctx)
#+end_src
** fsm defination
#+begin_src json :tangle ${BUILDDIR}/lexer-fsm.json
  {
    "variables": [
      {
        "name": "output",
        "type": "token"
      }
    ],
    "events": [
      {
        "name": "input",
        "parameters": [
          {
            "name": "ch",
            "type": "char"
          }
        ]
      },
      {
        "name": "new line"
      },
      {
        "name": "eof"
      }
    ],
    "states": [
      {
        "name": "init",
        "transactions": [
          {
            "actions": [
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('"
          },
          {
            "actions": [
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'"
          },
          {
            "actions": [
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['"
          },
          {
            "actions": [
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'"
          },
          {
            "actions": [
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'"
          },
          {
            "actions": [
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'"
          },
          {
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'"
          },
          {
            "actions": [
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'"
          },
          {
            "actions": [
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','"
          },
          {
            "actions": [
              "output = pipe"
            ],
            "event": "input",
            "guard": "ch == '|'"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          }
        ]
      },
      {
        "name": "token",
        "transactions": [
          {
            "actions": [
              "output = token",
              "output = open parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = close parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = open bracket",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = close bracket",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = open brace",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = close brace",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer",
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer",
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer",
              "output = pipe"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "output = token",
              "output = dot",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "number",
        "transactions": [
          {
            "actions": [
              "output = number",
              "output = open parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = close parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = open bracket",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = close bracket",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = open brace",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = close brace",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "output = pipe"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "char ready",
        "transactions": [
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "char"
          },
          {
            "actions": [
              "output = empty char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped char ready"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "char"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "char",
        "transactions": [
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "output = char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped char ready",
        "transactions": [
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "escaped char"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped char"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "escaped char"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped char",
        "transactions": [
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "output = escaped char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "string",
        "transactions": [
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '('"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ')'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '['"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ']'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '{'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '}'"
          },
          {
            "actions": [
              "output = string",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped string"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ':'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ','"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '|'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '='"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '!'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '<'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '>'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isspace(ch)"
          },
          {
            "actions": [
              "string error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "string error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped string",
        "transactions": [
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "string"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "string"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "string"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "=",
        "transactions": [
          {
            "actions": [
              "output = assignment",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "=="
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "event": "input",
            "guard": "ch == '<'",
            "target": "<="
          },
          {
            "event": "input",
            "guard": "ch == '>'",
            "target": ">="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = assignment",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = assignment",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "==",
        "transactions": [
          {
            "actions": [
              "output = equals",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = equals",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = equals",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "!",
        "transactions": [
          {
            "actions": [
              "output = not",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "!="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = not",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "!=",
        "transactions": [
          {
            "actions": [
              "output = not equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = not equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "<",
        "transactions": [
          {
            "actions": [
              "output = less than",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "<="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = less than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "<=",
        "transactions": [
          {
            "actions": [
              "output = less than or equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": ">",
        "transactions": [
          {
            "actions": [
              "output = greater than",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": ">="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = greater than",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": ">=",
        "transactions": [
          {
            "actions": [
              "output = greater than or equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = open bracket"
            ],
            "event": "input",
            "guard": "ch == '['",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = close bracket"
            ],
            "event": "input",
            "guard": "ch == ']'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = open brace"
            ],
            "event": "input",
            "guard": "ch == '{'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = close brace"
            ],
            "event": "input",
            "guard": "ch == '}'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '|'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add to buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      }
    ]
  }
#+end_src
** context
#+begin_src python :noweb-ref lexer-context
  class _LexerContext:
    buffer: List[str]

    def __init__(self):
      self.buffer = []
#+end_src
** delegates
*** action delegate
#+begin_src python :noweb-ref lexer-action-delegate
  class _LexerActionDelegate(LexerActionDelegate):

    def error(self, ctx):
      print('Unknow error')

    def quit(self, ctx):
      exit(1)

    def add_to_buffer(self, ctx, ch):
      ctx.buffer.append(ch)

    def clear_buffer(self, ctx):
      ctx.buffer.clear()

    def char_error(self, ctx):
      print('Char error')

    def escaped_char_error(self, ctx):
      print('Escaped char error')

    def string_error(self, ctx):
      print('String error')

    def escaped_string_error(self, ctx):
      print('Escaped string error')

    def token(self, ctx):
      tkn = ''.join(ctx.buffer)
      if tkn == 'true':
        return Literal(tkn, 'bool')
      elif tkn == 'false':
        return Literal(tkn, 'bool')
      else:
        return Identifier(tkn)

    def number(self, ctx):
      num = ''.join(ctx.buffer)
      return Literal(num, 'number')

    def char(self, ctx):
      ch = ''.join(ctx.buffer)
      return Literal(ch, 'char')

    def empty_char(self, ctx):
      return Literal('', 'char')

    def escaped_char(self, ctx):
      ch = ''.join(ctx.buffer)
      return Literal(ch, 'char')

    def string(self, ctx):
      string = ''.join(ctx.buffer)
      return Literal(string, 'string')

    def open_bracket(self, ctx):
      return Delimiter('[')

    def close_bracket(self, ctx):
      return Delimiter(']')

    def open_brace(self, ctx):
      return Delimiter('{')

    def close_brace(self, ctx):
      return Delimiter('}')

    def open_parenthesis(self, ctx):
      return Delimiter('(')

    def close_parenthesis(self, ctx):
      return Delimiter(')')

    def my_not(self, ctx):
      return Delimiter('!')

    def dot(self, ctx):
      return Delimiter('.')

    def colon(self, ctx):
      return Delimiter(':')

    def comma(self, ctx):
      return Delimiter(',')

    def pipe(self, ctx):
      return Delimiter('|')

    def assignment(self, ctx):
      return Delimiter('=')

    def equals(self, ctx):
      return Delimiter('==')

    def not_equal_to(self, ctx):
      return Delimiter('!=')

    def less_than(self, ctx):
      return Delimiter('<')

    def less_than_or_equal_to(self, ctx):
      return Delimiter('<=')

    def greater_than(self, ctx):
      return Delimiter('>')

    def greater_than_or_equal_to(self, ctx):
      return Delimiter('>=')
#+end_src
*** guard delegate
#+begin_src python :noweb-ref lexer-guard-delegate
  class _LexerGuardDelegate(LexerGuardDelegate):

    def isalpha(self, ch):
      return ch.isalpha()

    def isescaped(self, ch):
      escaped = ['a', 'b', 't', 'n', 'v', 'f', 'r']
      return ch in escaped

    def isdigit(self, ch):
      return ch.isdigit()

    def isspace(self, ch):
      return ch.isspace()
#+end_src
*** variable delegate
#+begin_src python :noweb-ref lexer-variable-delegate
  class _LexerVariableDelegate(LexerVariableDelegate):

    def __init__(self, listener: LexerAdapter):
      self._listener = listener

    def on_output_changed(self, output):
      self._listener.on_call(output)
#+end_src
*** adapter
#+begin_src python :noweb-ref lexer-adapter
  class LexerAdapter(ABC):

    @abstractmethod
    def on_call(self, token: Union[Expression, Assignment]):
      return NotImplemented
#+end_src
