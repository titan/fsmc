#+STARTUP: indent

* Data Model
** framework
#+begin_src python :tangle ${BUILDDIR}/model.py
  from typing import List, NewType, Union
  from semantic import Assignment, Call, Identifier, Literal, Type, BoolExpression


  <<parameter>>


  <<variable>>


  <<eventname>>


  <<event>>


  State = NewType('State', object)
  Transition = NewType('Transition', object)
  <<state>>


  <<transition>>
#+end_src
** parameter
#+begin_src python :noweb-ref parameter
  class Parameter:
    name: Identifier
    type: Type

    def __init__(self, name: Identifier = None, type: Type = None):
      self.name = name
      self.type = type

    def __str__(self):
      return '%s: %s' % (self.name, self.type)

    def __repr__(self):
      return 'Parameter(name: %s, type: %s)' % (self.name, self.type)
#+end_src

** variable
#+begin_src python :noweb-ref variable
  class Variable:
    name: str
    type: str

    def __init__(self, name: str = None, type: str = None):
      self.name = name
      self.type = type

    def __str__(self):
      return '%s: %s' % (self.name, self.type)

    def __repr__(self):
      return 'Variable(name: %s, type: %s)' % (self.name, self.type)
#+end_src
** eventname
#+begin_src python :noweb-ref eventname
  class EventName:
    data: List[Union[Literal, Identifier]]

    def __init__(self):
      self.data = []

    def __str__(self):
      return '%s' % (' '.join([str(x) for x in self.data]))

    def __repr__(self):
      return 'EventName(%s)' % (' '.join([repr(x) for x in self.data]))
#+end_src
** event
#+begin_src python :noweb-ref event
  class Event:
    name: str
    parameters: List[Parameter]

    def __init__(self):
      self.name = None
      self.parameters = []

    def __str__(self):
      if len(self.parameters) > 0:
        return '%s(%s)' % (self.name, ', '.join([str(x) for x in self.parameters]))
      else:
        return '%s' % self.name

    def __repr__(self):
      if len(self.parameters) > 0:
        return 'Event(%s: %s)' % (self.name, ', '.join([repr(x) for x in self.parameters]))
      else:
        return 'Event(%s)' % self.name
#+end_src
** state
#+begin_src python :noweb-ref state
  class State:
    name: str
    transitions: List[Transition]
    substates = List[State]
    on_enter: List[Union[Assignment, Call]]
    on_exit: List[Union[Assignment, Call]]


    def __init__(self):
      self.name = None
      self.transitions = []
      self.substates = []
      self.on_enter = []
      self.on_exit = []
#+end_src
** transition
#+begin_src python :noweb-ref transition
  class Transition:
    event: Event
    guard: BoolExpression
    actions: List[Union[Assignment, Call]]
    target: State

    def __init__(self):
      self.event = None
      self.guard = None
      self.actions = []
      self.target = None
#+end_src
