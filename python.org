#+STARTUP: indent
* Python
** framework
#+begin_src python :tangle ${BUILDDIR}/python.py
  from typing import List, Mapping
  from model import Event, Parameter, State, Transition, Variable
  from semantic import Assignment, Call, Identifier, CompareExpression, Expression, BoolExpression
  from analyzer import find_call_in_expression
  from utility import normalize

  <<exporter>>

#+end_src
** exporter
*** basic
#+begin_src python :noweb-ref exporter
  <<utility>>

  <<save-states>>

  <<save-delegates>>

  <<save-state-machine>>

  def save(dst: str, variables: List[Variable], states: List[State], args):
    import os.path
    if dst.endswith('python'):
      dst = dst[:-4]
    (path, filename) = os.path.split(dst)
    (name, ext) = os.path.splitext(filename)
    dst = os.path.join(path, name.replace(' ', '_').replace('-', '_') + ext)
    with open(dst, 'w') as f:
      f.write('from abc import ABC, abstractmethod\n\n')
      f.write(_save_states(states, args.debug))
      f.write(_save_delegates(variables, states, args.debug))
      f.write(_save_state_machine(states, args.debug))
#+end_src
*** states
#+begin_src python :noweb-ref save-states
  def _save_states(states: List[State], debug = False) -> str:
    code = 'class State:\n'
    i: int = 1
    names = []
    for state in states:
      code += '%s%s = %d\n' % (' ' * 2, normalize(state.name), i)
      names.append(normalize(state.name))
      i += 1
    if debug:
      code += '\n\n'
      code += '_state_strings = [\n'
      code += '  {0}'.format(',\n  '.join(["'{0}'".format(x) for x in ['N/A'] + names]))
      code += '\n]'
    return code + '\n\n'
#+end_src
*** delegates
#+begin_src python :noweb-ref save-delegates
  <<action-delegate>>
  <<guard-delegate>>
  <<variable-delegate>>
  def _save_delegates(variables: List[Variable], states: List[State], debug = False) -> str:
    code = ''
    code += _save_action_delegate(states) + '\n'
    code += _save_guard_delegate(states) + '\n'
    code += _save_variable_delegate(variables) + '\n'
    return code
#+end_src
**** aciton delegate
#+begin_src python :noweb-ref action-delegate
  def _save_action_delegate(states: List[State]) -> str:
    actions = {}
    for state in states:
      for transition in state.transitions:
        for action in transition.actions:
          if isinstance(action, Call):
            actions[str(action.operator)] = action
          elif isinstance(action, Assignment):
            for call in find_call_in_expression(action.expression):
              actions[str(call.operator)] = call
    count = 0
    code = 'class ActionDelegate(ABC):\n\n'
    for action in actions.values():
      if len(str(action.operator)) == 0:
        continue
      code += ' ' * 2 + '@abstractmethod\n'
      code += ' ' * 2 + 'def %s(self, %s):\n' % (_python_normalize(str(action.operator)), ', '.join(['ctx'] + [str(x).lower() for x in action.operands]))
      code += ' ' * 4 + 'return NotImplemented\n\n'
      count += 1
    if count == 0:
      code += ' ' * 2 + 'pass\n'
    return code + '\n'
#+end_src
**** guard delegate
#+begin_src python :noweb-ref guard-delegate
  def _save_guard_delegate(states: List[State]) -> str:
    calls = {}
    for state in states:
      for transition in state.transitions:
        guard = transition.guard
        if guard:
          for call in find_call_in_expression(guard.expr):
            calls[str(call)] = call

    count = 0
    code = 'class GuardDelegate(ABC):\n\n'
    for call in calls.values():
      code += ' ' * 2 + '@abstractmethod\n'
      code += ' ' * 2 + 'def %s(self, %s):\n' % (_python_normalize(str(call.operator)), ', '.join(['ctx'] + [str(x).lower() for x in call.operands]))
      code += ' ' * 4 + 'return NotImplemented\n\n'
      count += 1
    if count == 0:
      code += ' ' * 2 + 'pass\n'
    return code + '\n'
#+end_src
**** variable delegate
#+begin_src python :noweb-ref variable-delegate
  def _save_variable_delegate(variables: List[Variable]) -> str:
    code = 'class VariableDelegate(ABC):\n\n'
    count = 0
    for variable in variables:
      code += ' ' * 2 + '@abstractmethod\n'
      code += ' ' * 2 + 'def on_%s_changed(self, %s):\n' % (variable.name, variable.name)
      code += ' ' * 4 + 'return NotImplemented\n\n'
      count += 1
    if count == 0:
      code += ' ' * 2 + 'pass\n'
    return code + '\n'
#+end_src
*** state machine
#+begin_src python :noweb-ref save-state-machine
  def _save_state_machine(states: List[State], debug: bool) -> str:
    events = {}
    extended_events = {}
    eventimpl = ''
    for state in states:
      for transition in state.transitions:
        event = transition.event
        if event not in events:
          events[event] = [transition]
        else:
          events[event].append(transition)

    evtidx = 0
    for (event, transitions) in events.items():
      guardmappings = {}
      for transition in transitions:
        if transition.guard:
          guardmappings[str(transition.guard)] = transition
        else:
          guardmappings[''] = transition
      guards = [x for x in guardmappings.keys()]
      eventimpl += ' ' * 2 + 'def %s(self, %s):\n' % (_python_normalize(event.name), ', '.join(['ctx'] + [str(x.name).lower() for x in event.parameters]))
      if len(guards) == 1 and guards[0] == '':
        event_tag = normalize(event.name)
        extended_events[event_tag] = (event, evtidx)
        evtidx += 1
        eventimpl += ' ' * 4 + 'fromstate = self.state\n'
        eventimpl += ' ' * 4 + 'self._transition_actions[fromstate][self.%s](%s)\n' % (event_tag, ', '.join(['ctx'] + [str(x.name).lower() for x in event.parameters]))
        eventimpl += ' ' * 4 + 'self.state += _transition_states[fromstate][self.%s]\n' % event_tag
        if debug:
          eventimpl += ' ' * 4 + 'print("(%%s, %%s) => (%%s, %%s)" %% (_state_strings[fromstate], "%s", _state_strings[self.state], _action_strings[self.state][%d]))\n' % (str(event), extended_events[event_tag][1])
      else:
        firstline = True
        for guardstr in guards:
          if guardstr == '':
            continue
          transition = guardmappings[guardstr]
          guard = transition.guard
          event_tag = normalize(event.name) + '_' + normalize(str(guard))
          extended_events[event_tag] = (event, evtidx)
          evtidx += 1
          if isinstance(guard.expr, Expression) and (not isinstance(guard.expr, CompareExpression)) and (not isinstance(guard.expr, BoolExpression)) and isinstance(guard.expr.entity, Call):
            eventimpl += ' ' * 4 + ('el' if not firstline else '') + 'if self.guard_delegate.%s:\n' % str(guard)
          else:
            eventimpl += ' ' * 4 + ('el' if not firstline else '') + 'if %s:\n' % str(guard)
          eventimpl += ' ' * 6 + 'fromstate = self.state\n'
          eventimpl += ' ' * 6 + 'self._transition_actions[fromstate][self.%s](%s)\n' % (event_tag, ', '.join(['ctx'] + [str(x.name).lower() for x in event.parameters]))
          eventimpl += ' ' * 6 + 'self.state += _transition_states[fromstate][self.%s]\n' % event_tag
          if debug:
            eventimpl += ' ' * 6 + 'print("(%%s, %%s) => (%%s, %%s)" %% (_state_strings[fromstate], "%s[%s]", _state_strings[self.state], _action_strings[self.state][%d]))\n' % (str(event), guardstr.replace('"', '\\"'), extended_events[event_tag][1])
          firstline = False
        if '' in guards:
          event_tag = normalize(event.name)
          extended_events[event_tag] = (event, evtidx)
          evtidx += 1
          eventimpl += ' ' * 4 + 'else:\n'
          eventimpl += ' ' * 6 + 'fromstate = self.state\n'
          eventimpl += ' ' * 6 + 'self._transition_actions[fromstate][self.%s](%s)\n' % (event_tag, ', '.join(['ctx'] + [str(x.name).lower() for x in event.parameters]))
          eventimpl += ' ' * 6 + 'self.state += _transition_states[fromstate][self.%s]\n' % event_tag
          if debug:
            eventimpl += ' ' * 6 + 'print("(%%s, %%s) => (%%s, %%s)" %% (_state_strings[fromstate], "%s", _state_strings[self.state], _action_strings[self.state][%d]))\n' % (str(event), extended_events[event_tag][1])
      eventimpl += '\n'

    eventdef = ''
    eventidx = 0
    for tag in extended_events.keys():
      eventdef += '%s%s = %d\n' % (' ' * 2, tag, eventidx)
      eventidx += 1
    statestable = ['[%s]' % ', '.join(['0'] * len(extended_events))]
    actionstable = ['[%s]' % ', '.join(['self._noop'] * len(extended_events))]
    actionblocks = {}
    actionblockid = 0
    if debug:
      stringstable = ['[%s]' % ', '.join(["'N/A'"] * len(extended_events))]
    noopblocks = {}
    noopid = 0
    for state in states:
      targets = []
      actions = []
      if debug:
        strings = []
        for i in range(len(extended_events)):
          strings.append('')
      for tag in extended_events.keys():
        found_target = False
        found_action = False
        if debug:
          (_, evtidx) = extended_events[tag]
        for transition in state.transitions:
          if transition.guard:
            event_tag = normalize(str(transition.event.name)) + '_' + normalize(str(transition.guard))
          else:
            event_tag = normalize(str(transition.event.name))
          if tag == event_tag:
            if transition.target:
              target = states.index(transition.target) - states.index(state)
              found_target = True
            if len(transition.actions) == 0:
              if debug:
                actionstring = 'N/A'
              paramdecls = ', '.join(['%s' % str(x.name) for x in transition.event.parameters])
              if paramdecls not in noopblocks:
                action = 'self._noop_%d' % noopid
                noopblocks[paramdecls] = action
                noopid += 1
                found_action = True
              else:
                action = noopblocks[paramdecls]
                found_action = True
            elif len(transition.actions) == 1:
              if debug:
                actionstring = ';'.join([str(x) for x in transition.actions])
              if isinstance(transition.actions[0], Call):
                args = ''.join([str(x) for x in transition.actions[0].operands])
                params = ''.join([str(x.name) for x in transition.event.parameters])
                if args == params:
                  action = 'self.action_delegate.%s' % _python_normalize(str(transition.actions[0].operator))
                  found_action = True
                else:
                  actionblock = ', '.join(['%s: %s' % (str(x.name), x.type) for x in transition.event.parameters]) + '\n' + str(transition.actions[0])
                  if actionblock not in actionblocks:
                    action = 'self._action_block_%d' % actionblockid
                    actionblocks[actionblock] = (action, False)
                    actionblockid += 1
                    found_action = True
                  else:
                    (action, _) = actionblocks[actionblock]
                    found_action = True
              elif isinstance(transition.actions[0], Assignment):
                actionblock = str(transition.actions[0])
                if actionblock not in actionblocks:
                  action = 'self._action_block_%d' % actionblockid
                  actionblocks[actionblock] = (action, False)
                  actionblockid += 1
                  found_action = True
                else:
                  (action, _) = actionblocks[actionblock]
                  found_action = True
              else:
                paramdecls = ', '.join(['%s' % str(x.name) for x in transition.event.parameters])
                if paramdecls not in noopblocks:
                  action = 'self._noop_%d' % noopid
                  noopblocks[paramdecls] = action
                  noopid += 1
                  found_action = True
                else:
                  action = noopblocks[paramdecls]
                  found_action = True
            else:
              if debug:
                actionstring = '; '.join([str(x) for x in transition.actions])
              actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
              if actionblock not in actionblocks:
                action = 'self._action_block_%d' % actionblockid
                actionblocks[actionblock] = (action, False)
                actionblockid += 1
              else:
                (action, _) = actionblocks[actionblock]
              found_action = True
        if not found_target:
          target = 0
        if not found_action:
          if debug:
            actionstring = 'N/A'
          paramdecls = ', '.join(['%s' % x.name for x in extended_events[tag][0].parameters])
          if paramdecls not in noopblocks:
            action = 'self._noop_%d' % noopid
            noopblocks[paramdecls] = action
            noopid += 1
          else:
            action = noopblocks[paramdecls]
        targets.append(target)
        actions.append(action)
        if debug:
          strings[evtidx] = (actionstring)
      statestable.append('[%s]' % ', '.join(['%d' % x for x in targets]))
      actionstable.append('[%s]' % ', '.join(actions))
      if debug:
        stringstable.append('[%s]' % ', '.join(["'{0}'".format(x.replace("'", "\\'")) for x in strings]))
    actionimpl = ' ' * 2 + 'def _noop(self, ctx):\n'
    actionimpl += ' ' * 4 + 'pass\n\n'
    for paramdecls in noopblocks.keys():
      action = noopblocks[paramdecls]
      actionimpl += ' ' * 2 + 'def {0}(self, {1}):\n'.format(action.replace('self.', ''), ', '.join(['ctx', paramdecls]))
      actionimpl += ' ' * 4 + 'pass\n\n'
    for state in states:
      for transition in state.transitions:
        if len(transition.actions) == 0:
          continue
        elif len(transition.actions) == 1:
          if isinstance(transition.actions[0], Call):
            args = ''.join([str(x) for x in transition.actions[0].operands])
            params = ''.join([str(x.name) for x in transition.event.parameters])
            if args == params:
              continue
            actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
          elif isinstance(transition.actions[0], Assignment):
            actionblock = str(transition.actions[0])
          else:
            continue
        else:
          actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
        (action, generated) = actionblocks[actionblock]
        if generated:
          continue
        actionfun = action.replace('self.', '')
        actionblocks[actionblock] = (action, True)
        actionimpl += ' ' * 2 + 'def %s(self, %s):\n' % (actionfun, ', '.join(['ctx'] + [str(x.name).lower() for x in transition.event.parameters]))
        for action in transition.actions:
          if isinstance(action, Call):
            actionimpl += ' ' * 4 + 'self.action_delegate.%s(%s)\n' % (_python_normalize(str(action.operator)), ', '.join(['ctx'] + [str(x) for x in action.operands]))
          elif isinstance(action, Assignment):
            if isinstance(action.expression, Identifier):
              actionimpl += ' ' * 4 + '%s = self.action_delegate.%s(state, ctx)\n' % (str(action.target), _python_normalize(str(action.expression)))
              actionimpl += ' ' * 4 + 'self.variable_delegate.on_%s_changed(%s)\n' % (str(action.target).lower(), str(action.target))
            elif isinstance(action.expression, Call):
              call = action.expression
              actionimpl += ' ' * 4 + '%s = self.action_delegate.%s(%s)\n' % (str(action.target), _python_normalize(str(call.operator)), ', '.join(['ctx'] + [str(x) for x in call.operands]))
              actionimpl += ' ' * 4 + 'self.variable_delegate.on_%s_changed(%s)\n' % (str(action.target).lower(), str(action.target))
            else:
              actionimpl += ' ' * 4 + '%s = self.action_delegate.%s(ctx)\n' % (str(action.target), _python_normalize(str(action.expression)))
              actionimpl += ' ' * 4 + 'self.variable_delegate.on_%s_changed(%s)\n' % (str(action.target).lower(), str(action.target))
        actionimpl += '\n'
    code = '_transition_states = [%s]\n\n\n' % (', '.join(statestable))
    if debug:
      code += '_action_strings = [\n'
      code += '  %s' % ',\n  '.join(stringstable)
      code += '\n]\n\n\n'
    code += 'class StateMachine:\n'
    code += eventdef + '\n'
    code += ' ' * 2 + 'def __init__(self, action_delegate = None, guard_delegate = None, variable_delegate = None):\n'
    code += ' ' * 4 + 'self.state = State.%s\n' % normalize(states[0].name)
    code += ' ' * 4 + 'self.action_delegate = action_delegate\n'
    code += ' ' * 4 + 'self.guard_delegate = guard_delegate\n'
    code += ' ' * 4 + 'self.variable_delegate = variable_delegate\n'
    code += ' ' * 4 + 'self._transition_actions = [%s]\n' % ', '.join(actionstable)
    code += '\n'
    return code + eventimpl + actionimpl
#+end_src

| variable        | type                             | note                  |
|-----------------+----------------------------------+-----------------------|
| events          | Mapping[Event, List[Transition]] |                       |
| extended_events | Mapping[str, Transition]         | key is event + guards |
| guardmappings   | Mapping[str, Transition]         | key is guard          |
| actionblocks    | Mapping[str, Tuple[str, bool]]   | key is actionblock    |
*** utility
#+begin_src python :noweb-ref utility
  def _python_normalize(string: str) -> str:
    keywords = [ "False","None","True","and","as","assert","async","await","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield" ]
    result = normalize(string.replace('-', ' ').replace('_', ' ')).lower()
    if result in keywords:
      return 'my_' + result
    else:
      return result
#+end_src
