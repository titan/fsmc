#+STARTUP: indent
* Excel
** framework
#+begin_src python :tangle ${BUILDDIR}/excel.py
  from typing import List, Mapping, Tuple, Union
  from model import Event, Parameter, State, Transition, Variable
  from semantic import Assignment, BoolExpression, Call, Expression, Identifier
  from analyzer import HeaderSyntaxer, HeaderLexerAdapter, ActionSyntaxer, ActionLexerAdapter
  from lexer import Lexer

  <<importer>>

  <<exporter>>
#+end_src
** importer
*** basic
#+begin_src python :noweb-ref importer
  <<parse-events>>

  <<parse-states>>

  def load(src: str) -> Tuple[List[Variable], List[State]]:
    from openpyxl import load_workbook
    wb = load_workbook(src, read_only = True)
    wx = wb[wb.sheetnames[0]]
    events = _parse_events(wx)
    (variables, states) = _parse_states(wx, events)
    wb.close()
    return (variables, states)
#+end_src

*** parse events
#+begin_src python :noweb-ref parse-events
  <<verify-parameter>>

  <<verify-event>>

  def _parse_events(wx) -> List[Tuple[Event, BoolExpression]]:
    uniqevents = {}
    events = []
    headers = wx[1]
    for i in range(1, len(headers)):
      header = headers[i]
      if not header.value:
        continue
      syntaxer = HeaderSyntaxer()
      lexer = Lexer(HeaderLexerAdapter(syntaxer))
      for ch in str(header.value):
        lexer.feed(ch)
      lexer.eof()
      syntaxer.eof()
      transition = syntaxer.result()
      event = transition.event
      if event.name not in uniqevents:
        for parameter in event.parameters:
          _verify_parameter(parameter, str(header.value))
        uniqevents[event.name] = event
      else:
        event = uniqevents[event.name]
      events.append((_verify_event(event, str(header.value)), transition.guard))
    return events
#+end_src
**** verify-parameter
#+begin_src python :noweb-ref verify-parameter
  def _verify_parameter(p: Parameter, d: str) -> Parameter:
    if not p.name:
      print('Missing name in parameter: %s' % d)
      exit(1)
    if not p.type:
      print('Missing type in parameter: %s' % d)
      exit(1)
    return p
#+end_src
**** verify-event
#+begin_src python :noweb-ref verify-event
  def _verify_event(e: Event, d: str) -> Event:
    if not e.name:
      print('Missing name in event: %s' % d)
      exit(1)
    else:
      return e
#+end_src
*** parse states
#+begin_src python :noweb-ref parse-states
  <<verify-transition>>

  def _parse_states(wx, headers: List[Tuple[Event, BoolExpression]]) -> List[State]:
    states = []
    variables = {}
    isheader = True
    for row in wx.rows:
      if isheader:
        isheader = False
        continue
      state = State()
      #if row[0].value.count('.') != 0:
      #  continue
      parts = row[0].value.split('----')
      if len(parts) == 1:
        state.name = parts[0]
      if len(parts) > 1:
        state.name = parts[0][:-1]
        for line in parts[1].split('\n'):
          if len(line) == 0:
            continue
          syntaxer = ActionSyntaxer()
          lexer = Lexer(ActionLexerAdapter(syntaxer))
          for ch in line:
            lexer.feed(ch)
          lexer.eof()
          syntaxer.eof()
          state.on_enter.append(syntaxer.result())
      if len(parts) == 3:
        state.name = parts[0][:-1]
        for line in parts[2].split('\n'):
          if len(line) == 0:
            continue
          syntaxer = ActionSyntaxer()
          lexer = Lexer(ActionLexerAdapter(syntaxer))
          for ch in line:
            lexer.feed(ch)
          lexer.eof()
          syntaxer.eof()
          state.on_exit.append(syntaxer.result())
      for j in range(1, len(row)):
        transition = Transition()
        transition._targetstrs = []
        transition._targetstr = None
        transition.event = headers[j - 1][0]
        transition.guard = headers[j - 1][1]
        cell = row[j]
        if cell.value:
          lines = cell.value.split('\n')
          state_mode = False
          for line in lines:
            if line == '----':
              state_mode = True
              continue
            if not state_mode:
              if len(line) == 0:
                continue
              syntaxer = ActionSyntaxer()
              lexer = Lexer(ActionLexerAdapter(syntaxer))
              for ch in line:
                lexer.feed(ch)
              lexer.eof()
              syntaxer.eof()
              transition.actions.append(syntaxer.result())
              if isinstance(syntaxer.result(), Assignment):
                assignment = syntaxer.result()
                variables[str(assignment.target) + str(assignment.type)] = Variable(str(assignment.target), str(assignment.type))
                if isinstance(assignment.expression, Call):
                  assignment.expression.type = assignment.type
            else:
              transition._targetstrs.append(line)
          if len(transition._targetstrs) > 0:
            transition._targetstr = '\n'.join(transition._targetstrs)
          state.transitions.append(transition)
        else:
          state.transitions.append(None)
      states.append(state)
    for state in states:
      for t in state.transitions:
        if t:
          _verify_transition(t, states)
    return ([x for x in variables.values()], states)
#+end_src
**** verify transition
#+begin_src python :noweb-ref verify-transition
  def _verify_transition(t: Transition, states: List[State]):
    if t._targetstr:
      for state in states:
        if t._targetstr == state.name:
          t.target = state
          break
      if not t.target:
        print('Undefined target: %s' % t._targetstr)
        exit(1)
    if len(t.actions) > 0:
      for action in t.actions:
        if isinstance(action, Assignment):
          pass
        elif isinstance(action, Call):
          for arg in action.operands:
            if not isinstance(arg, Identifier):
              continue
            found: bool = False
            for param in t.event.parameters:
              if str(arg) == str(param.name):
                found = True
                break
            if not found:
              print('Undefined action arguments "%s" in action: %s' % (arg, action))
              exit(1)
#+end_src
** exporter
*** basic
#+begin_src python :noweb-ref exporter
  <<export-headers>>

  <<export-content>>

  def save(dst: str, variables: List[Variable], states: List[State], args):
    from openpyxl import Workbook
    from openpyxl.styles import NamedStyle, Border, Side
    import os.path
    if dst.endswith('excel'):
      dst = dst[:-5] + 'xlsx'

    wb = Workbook(write_only = True)
    ws = wb.create_sheet()
    pairs = {}
    idx = 0
    for state in states:
      for transition in state.transitions:
        if transition == None:
          continue
        event = transition.event
        key = str(event) + str(transition.guard)
        if key not in pairs:
          pairs[str(event) + str(transition.guard)] = (idx, event, transition.guard)
          idx += 1
    headers = [x for x in pairs.values()]
    headers.sort()
    _export_headers(ws, headers)
    rows = []
    for state in states:
      row = [state]
      for (_, event, guard) in headers:
        found = False
        for transition in state.transitions:
          if transition == None:
            continue
          if event == transition.event and (str(guard) == str(transition.guard)):
            row.append((transition.target if transition.target != state else None, transition.actions))
            found = True
            break
        if not found:
          row.append((None, None))
      rows.append(row)
    _export_content(ws, rows)
    wb.save(dst)
#+end_src
*** export headers
#+begin_src python :noweb-ref export-headers
  def _export_headers(ws, values: List[Tuple[int, Event, Expression]]):
    headers = []
    for (_, event, guard) in values:
      header = ''
      if len(event.parameters) > 0:
        header += '%s(%s)' % (event.name, ', '.join(['%s: %s' % (x.name, x.type) for x in event.parameters]))
      else:
        header += '%s' % (event.name)
      if guard:
        header += '[%s]' % str(guard)
      headers.append(header)
    ws.append(['state\event'] + headers)
#+end_src
*** export content
#+begin_src python :noweb-ref export-content
  def _export_content(ws, values: List[List[Union[State, Tuple[State, List[Union[Assignment, Expression]]]]]]):
    for line in values:
      row = []
      for cell in line:
        if isinstance(cell, State):
          if len(cell.on_enter) != 0 or len(cell.on_exit) != 0:
            value = cell.name + '\n----\n' + '\n'.join([str(x) for x in cell.on_enter]) + '\n----\n' + '\n'.join([str(x) for x in cell.on_exit])
            row.append(value)
          else:
            row.append(cell.name)
        elif isinstance(cell, tuple):
          (state, actions) = cell
          content = ''
          if actions:
            tmp = []
            for x in actions:
              if isinstance(x, Assignment):
                tmp.append('%s: %s = %s' % (str(x.target), str(x.type), str(x.expression).replace('()', '')))
              else:
                tmp.append(str(x).replace('()', ''))
            content += '\n'.join(tmp)
          content += '\n----\n'
          if state:
            content += state.name
          if content == '\n----\n':
            content = None
          row.append(content)
      ws.append(row)
#+end_src
