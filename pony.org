#+STARTUP: indent
* Pony
** framework
#+begin_src python :tangle ${BUILDDIR}/pony.py
  from typing import List, Mapping, Tuple, Union
  from model import Event, Parameter, State, Transition, Variable
  from semantic import Assignment, Call, Identifier, Literal, CompareExpression, Expression, BoolExpression
  from analyzer import find_call_in_expression
  from utility import normalize

  <<exporter>>

#+end_src
** exporter
*** basic
#+begin_src python :noweb-ref exporter
  <<utility>>

  <<save-states>>

  <<save-delegates>>

  <<save-state-machine>>

  def save(dst: str, variables: List[Variable], states: List[State], args):
    import os.path
    (path, filename) = os.path.split(dst)
    (name, ext) = os.path.splitext(filename)
    module = name.replace(' ', '-')
    dst = os.path.join(path, module + ext)
    prefix = ''.join([x.capitalize() for x in module.replace('_', '-').split('-')])
    with open(dst, 'w') as f:
      code1 = _save_states(states, prefix)
      (code2_1, code2_2, code2_3) = _save_delegates(variables, states, prefix, False)
      code2 = code2_1 + code2_2 + code2_3
      code3 = _save_state_machine(states, args.debug, code2_1 != '', code2_2 != '', code2_3 != '', prefix, False)
      f.write('use "logger"\n')
      f.write('use "promises"\n\n')
      f.write(code1 + code2 + code3)
      (code2_1, code2_2, code2_3) = _save_delegates(variables, states, prefix, True)
      code2 = code2_1 + code2_2 + code2_3
      code3 = _save_state_machine(states, args.debug, code2_1 != '', code2_2 != '', code2_3 != '', prefix, True)
      f.write(code2 + code3)
#+end_src
*** states
#+begin_src python :noweb-ref save-states
  def _save_states(states: List[State], prefix: str) -> str:
    code = ''
    for (idx, state) in enumerate(states):
      code += 'primitive {0} fun apply(): I32 => {1}\n'.format(prefix + _to_capitalize(_pony_normalize(state.name)), idx + 1)
    code += '\n'
    code += 'type {0}State is ({1})\n'.format(prefix, ' | '.join([prefix + _to_capitalize(_pony_normalize(x.name)) for x in states]))
    code += '\n'
    return code
#+end_src
*** delegates
#+begin_src python :noweb-ref save-delegates
  <<action-delegate>>
  <<guard-delegate>>
  <<variable-delegate>>
  def _save_delegates(variables: List[Variable], states: List[State], prefix: str, promise: bool) -> str:
    code1 = _save_action_delegate(variables, states, prefix, promise)
    code2 = _save_guard_delegate(states, prefix, promise)
    code3 = _save_variable_delegate(variables, prefix, promise)
    return (code1, code2, code3)
#+end_src
**** action delegate
#+begin_src python :noweb-ref action-delegate
  def _save_action_delegate(varaibles: List[Variable], states: List[State], prefix: str, promise: bool) -> str:
    actions = {}
    for state in states:
      for transition in state.transitions:
        for action in transition.actions:
          if isinstance(action, Call):
            actions[str(action.operator)] = (transition.event, action)
          elif isinstance(action, Assignment):
            for call in find_call_in_expression(action.expression):
              actions[str(call.operator)] = (transition.event, call)
    code = ''
    for (event, action) in actions.values():
      if len(str(action.operator)) == 0:
        continue
      types = []
      returntype = ''
      for operand in action.operands:
        if isinstance(operand, Identifier):
          for param in event.parameters:
            if str(param.name) == str(operand):
              types.append(_to_pony_primitive_type(str(param.type)))
              break
        elif isinstance(operand, Literal):
          types.append(_to_pony_primitive_type(operand.type))
      if action.type != None:
        returntype = _to_pony_primitive_type(_pony_normalize(str(action.type)))
      if returntype == '':
        returntype = 'T'
      else:
        returntype = '(T, %s)' % returntype
      if promise:
        returntype = 'Promise[{0}]'.format(returntype)
      code += ' ' * 4 + 'fun {0}({1}): {2}\n'.format(_pony_normalize(str(action.operator)), ', '.join(['ctx: T'] + ['a{0}: {1}'.format(i, t) for (i, t) in enumerate(types)]), returntype)
    if code != '':
      if promise:
        code = 'trait val ' + prefix + 'AsyncActionDelegate[T: Any #share]\n' + code + '\n'
      else:
        code = 'trait ' + prefix + 'ActionDelegate[T: Any ref]\n' + code + '\n'
    return code
#+end_src
**** guard delegate
#+begin_src python :noweb-ref guard-delegate
  def _save_guard_delegate(states: List[State], prefix: str, promise: bool) -> Tuple[List[str], str]:
    calls = {}
    for state in states:
      for transition in state.transitions:
        guard = transition.guard
        if guard:
          for call in find_call_in_expression(guard.expr):
            calls[str(call)] = (transition.event, call)
    code = ''
    for (event, call) in calls.values():
      types = []
      for operand in call.operands:
        if isinstance(operand, Identifier):
          for param in event.parameters:
            if str(param.name) == str(operand):
              types.append(_to_pony_primitive_type(str(param.type)))
              break
        elif isinstance(operand, Literal):
          types.append(_to_pony_primitive_type(operand.type))
      code += ' ' * 4 + 'fun {0}({1}): {2}\n'.format(_pony_normalize(str(call.operator)), ', '.join(['ctx: T'] + ['a{0}: {1}'.format(i, t) for (i, t) in enumerate(types)]), 'Bool')
    if code != '':
      if promise:
        code = 'trait val ' + prefix + 'AsyncGuardDelegate[T: Any #share]\n' + code + '\n'
      else:
        code = 'trait ' + prefix + 'GuardDelegate[T: Any ref]\n' + code + '\n'
    return code
#+end_src
**** variable delegate
#+begin_src python :noweb-ref variable-delegate
  def _save_variable_delegate(variables: List[Variable], prefix: str, promise: bool) -> Tuple[List[str], str]:
    types = {}
    code = ''
    for variable in variables:
      if variable.type in _pony_builtin_types:
        type = variable.type
      else:
        type = _to_pony_primitive_type(variable.type)
        types[type] = 0
      code += ' ' * 4 + 'fun on_{0}_changed(ctx: T, v: {1}): None\n'.format(_pony_normalize(variable.name), type)
    if code != '':
      if promise:
        code = 'trait val ' + prefix + 'AsyncVariableDelegate[T: Any #share]\n' + code + '\n'
      else:
        code = 'trait ' + prefix + 'VariableDelegate[T: Any ref]\n' + code + '\n'
    return code
#+end_src
*** state machine
#+begin_src python :noweb-ref save-state-machine
  def _get_event_data(states: List[State]) -> Tuple[Mapping[Event, Mapping[str, Tuple[Transition, str]]], Mapping[str, Tuple[Event, int]]]:
    events = {}
    extended_events = {}
    for state in states:
      for transition in state.transitions:
        event = transition.event
        if event not in events:
          events[event] = [transition]
        else:
          events[event].append(transition)
    evtidx = 0
    for (event, transitions) in events.items():
      guardmappings = {}
      for transition in transitions:
        if transition.guard:
          guardmappings[str(transition.guard)] = (transition, None)
        else:
          guardmappings[''] = (transition, None)
      events[event] = guardmappings
      guards = [x for x in guardmappings.keys()]
      if len(guards) == 1 and guards[0] == '':
        event_tag = normalize(event.name)
        extended_events[event_tag] = (event, evtidx)
        evtidx += 1
        guardmappings[''] = (guardmappings[''][0], event_tag)
      else:
        for guardstr in guards:
          if guardstr == '':
            continue
          (transition, _) = guardmappings[guardstr]
          guard = transition.guard
          event_tag = normalize(event.name) + '_' + normalize(str(guard))
          extended_events[event_tag] = (event, evtidx)
          evtidx += 1
          guardmappings[guardstr] = (guardmappings[guardstr][0], event_tag)
        if '' in guards:
          event_tag = normalize(event.name)
          extended_events[event_tag] = (event, evtidx)
          evtidx += 1
          guardmappings[''] = (guardmappings[''][0], event_tag)
    return (events, extended_events)

  def _get_target_and_action_data(states: List[State], extended_events: Mapping[str, Tuple[Event, int]], prefix: str) -> Tuple[List[List[str]], List[List[str]], Mapping[str, Tuple[str, bool]], List[List[str]]]:
    targetstable = [[0] * len(extended_events)]
    actionstable = [['_{0}Noop'.format(prefix)] * len(extended_events)]
    stringstable = [['N/A'] * len(extended_events)]
    actionblocks = {}
    actionblockid = 0
    for state in states:
      targets = []
      actions = []
      strings = []
      for i in range(len(extended_events)):
        strings.append('N/A')
      for tag in extended_events.keys():
        found_target = False
        found_action = False
        (_, evtidx) = extended_events[tag]
        for transition in state.transitions:
          if transition.guard:
            event_tag = normalize(str(transition.event.name)) + '_' + normalize(str(transition.guard))
          else:
            event_tag = normalize(str(transition.event.name))
          if tag == event_tag:
            if transition.target:
              target = states.index(transition.target) - states.index(state)
              found_target = True
            if len(transition.actions) == 0:
              string = 'N/A'
              action = '_{0}Noop'.format(prefix)
              found_action = True
            elif len(transition.actions) == 1:
              string = '{0}'.format(str(transition.actions[0]).replace(' ', '-'))
              if isinstance(transition.actions[0], Call):
                args = ''.join([str(x) for x in transition.actions[0].operands])
                actionblock = ', '.join(['%s: %s' % (str(x.name), x.type) for x in transition.event.parameters]) + '\n' + str(transition.actions[0])
                if actionblock not in actionblocks:
                  action = '_{0}ActionBlock{1}'.format(prefix, actionblockid)
                  actionblocks[actionblock] = (action, False)
                  actionblockid += 1
                  found_action = True
                else:
                  (action, _) = actionblocks[actionblock]
                  found_action = True
              elif isinstance(transition.actions[0], Assignment):
                actionblock = str(transition.actions[0])
                if actionblock not in actionblocks:
                  action = '_{0}ActionBlock{1}'.format(prefix, actionblockid)
                  actionblocks[actionblock] = (action, False)
                  actionblockid += 1
                  found_action = True
                else:
                  (action, _) = actionblocks[actionblock]
                  found_action = True
              else:
                action = '_{0}Noop'.format(prefix)
                found_action = True
            else:
              string = '{0}'.format('; '.join([str(x).replace(' ', '-') for x in transition.actions]))
              actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
              if actionblock not in actionblocks:
                action = '_{0}ActionBlock{1}'.format(prefix, actionblockid)
                actionblocks[actionblock] = (action, False)
                actionblockid += 1
              else:
                (action, _) = actionblocks[actionblock]
              found_action = True
        if not found_target:
          target = 0
        if not found_action:
          string = 'N/A'
          action = '_{0}Noop'.format(prefix)
        strings[evtidx] = string
        targets.append(target)
        actions.append(action)
      stringstable.append(strings)
      targetstable.append(targets)
      actionstable.append(actions)
    return (targetstable, actionstable, actionblocks, stringstable)

  def _save_state_machine(states: List[State], debug: bool, need_action_delegate: bool, need_guard_delegate: bool, need_variable_delegate: bool, prefix: str, promise: bool) -> str:
    (events, extended_events) = _get_event_data(states)
    extended_eventtags = [x for x in extended_events.keys()]
    (targetstable, actionstable, actionblocks, actionstringstable) = _get_target_and_action_data(states, extended_events, prefix)

    action_parameter_signatures = _action_parameter_signatures(events)
    optional_action_parameter_signatures = _optional_action_parameter_signatures(events)

    delegates_in_event = []
    delegates_in_exec = []
    if need_action_delegate:
      delegates_in_event.append('action_delegate')
      delegates_in_exec.append('action_delegate')
    if need_guard_delegate and promise:
      delegates_in_exec.append('guard_delegate')
    if need_variable_delegate:
      delegates_in_event.append('variable_delegate')
      delegates_in_exec.append('variable_delegate')

    if promise:
      eventimpl = ' ' * 4 + 'fun val _exec(%s): Promise[(%sAsyncStateMachine[T], T)] =>\n' % (', '.join(["idx: USize", "ctx: T"] + optional_action_parameter_signatures), prefix)
      eventimpl += ' ' * 8 + "try\n"
      eventimpl += ' ' * 12 + "let p = _transition_actions(idx)?({0})\n".format(', '.join(delegates_in_event + ['ctx'] + [x.split(':')[0] for x in action_parameter_signatures]))
      eventimpl += ' ' * 12 + 'let newstate = state + _transition_states(idx)?\n'
      eventimpl += ' ' * 12 + "p.next[({prefix}AsyncStateMachine[T], T)]({{(ctx': T) => ({prefix}AsyncStateMachine[T]({delegates} where state' = newstate, logger = _logger), ctx')}})\n".format(prefix = prefix, delegates = ', '.join(delegates_in_exec))
      eventimpl += ' ' * 8 + "else\n"
      eventimpl += ' ' * 12 + "let p = Promise[(%sAsyncStateMachine[T], T)]\n" % prefix
      eventimpl += ' ' * 12 + "p((this, ctx))\n"
      eventimpl += ' ' * 12 + "p\n"
      eventimpl += ' ' * 8 + "end\n\n"
    else:
      eventimpl = ' ' * 4 + 'fun ref _exec(%s): T =>\n' % (', '.join(["idx: USize", "ctx: T"] + optional_action_parameter_signatures))
      eventimpl += ' ' * 8 + "try\n"
      eventimpl += ' ' * 12 + "let ctx': T = _transition_actions(idx)?({0})\n".format(', '.join(delegates_in_event + ['ctx'] + [x.split(':')[0] for x in action_parameter_signatures]))
      eventimpl += ' ' * 12 + 'state = state + _transition_states(idx)?\n'
      eventimpl += ' ' * 12 + "ctx'\n"
      eventimpl += ' ' * 8 + "else\n"
      eventimpl += ' ' * 12 + "ctx\n"
      eventimpl += ' ' * 8 + "end\n\n"

    for (event, guardmappings) in events.items():
      parameter_signatures = [_parameter_to_pony_signature(x) for x in event.parameters]
      if promise:
        eventimpl += ' ' * 4 + 'fun val %s(%s): Promise[(%sAsyncStateMachine[T], T)] =>\n' % (_pony_normalize(event.name), ', '.join(["ctx: T"] + parameter_signatures), prefix)
      else:
        eventimpl += ' ' * 4 + 'fun ref %s(%s): T =>\n' % (_pony_normalize(event.name), ', '.join(["ctx: T"] + parameter_signatures))
      guards = [x for x in guardmappings.keys()]
      if len(guards) == 1 and guards[0] == '':
        args = []
        for p in action_parameter_signatures:
          if p in parameter_signatures:
            args.append(p.split(':')[0])
          else:
            args.append('None')
        (transition, event_tag) = guardmappings['']
        eventimpl += ' ' * 8 + 'let idx = USize.from[I32]((state * {0}) + {1})\n'.format(len(extended_events), extended_eventtags.index(event_tag))
        if debug:
          eventimpl += ' ' * 8 + 'match _logger\n'
          eventimpl += ' ' * 8 + '| let logger: Logger[String] => try logger(Info) and logger.log("(" + _state_strings(USize.from[I32](state))? + ", {0}) => (" + _state_strings(USize.from[I32](state + _transition_states(idx)?))? + ", " + _action_strings(idx)? + ")", __loc) else logger(Info) and logger.log("Index is out of bounds") end\n'.format(str(event).replace("()", ""))
          eventimpl += ' ' * 8 + 'end\n'
        eventimpl += ' ' * 8 + '_exec(%s)\n' % (', '.join(['idx', 'ctx'] + args))
      else:
        firstline = True
        args = []
        for p in action_parameter_signatures:
          if p in parameter_signatures:
            args.append(p.split(':')[0])
          else:
            args.append('None')
        for guardstr in guards:
          if guardstr == '':
            continue
          (transition, event_tag) = guardmappings[guardstr]
          guard = transition.guard
          if isinstance(guard.expr, Expression) and (not isinstance(guard.expr, CompareExpression)) and (not isinstance(guard.expr, BoolExpression)) and isinstance(guard.expr.entity, Call):
            eventimpl += ' ' * 8 + ('else' if not firstline else '') + 'if guard_delegate.{0}({1}) then\n'.format(_pony_normalize(str(guard.expr.entity.operator)), ', '.join(['ctx'] + [str(x) for x in guard.expr.entity.operands]))
          else:
            eventimpl += ' ' * 8 + ('else' if not firstline else '') + 'if {0} then\n'.format(_pony_normalize(str(guard)))
          eventimpl += ' ' * 12 + 'let idx = USize.from[I32]((state * {0}) + {1})\n'.format(len(extended_events), extended_eventtags.index(event_tag))
          if debug:
            eventimpl += ' ' * 12 + 'match _logger\n'
            eventimpl += ' ' * 12 + '| let logger: Logger[String] => try logger(Info) and logger.log("(" + _state_strings(USize.from[I32](state))? + ", {0}[{1}]) => (" + _state_strings(USize.from[I32](state + _transition_states(idx)?))? + ", " + _action_strings(idx)? + ")", __loc) else logger(Info) and logger.log("Index is out of bounds") end\n'.format(str(event).replace("()", ""), guardstr.replace('"', '\\"').replace('\\', '\\\\'))
            eventimpl += ' ' * 12 + 'end\n'
          eventimpl += ' ' * 12 + '_exec(%s)\n' % (', '.join(['idx', 'ctx'] + args))
          firstline = False
        if '' in guards:
          eventimpl += ' ' * 8 + 'else\n'
          event_tag = normalize(event.name)
          eventimpl += ' ' * 12 + 'let idx = USize.from[I32]((state * {0}) + {1})\n'.format(len(extended_events), extended_eventtags.index(event_tag))
          if debug:
            eventimpl += ' ' * 12 + 'match _logger\n'
            eventimpl += ' ' * 12 + '| let logger: Logger[String] => try logger(Info) and logger.log("(" + _state_strings(USize.from[I32](state))? + ", {0}) => (" + _state_strings(USize.from[I32](state + _transition_states(idx)?))? + ", " + _action_strings(idx)? + ")", __loc) else logger(Info) and logger.log("Index is out of bounds") end\n'.format(str(event).replace("()", ""))
            eventimpl += ' ' * 12 + 'end\n'
          eventimpl += ' ' * 12 + '_exec(%s)\n' % (', '.join(['idx', 'ctx'] + args))
        else:
          eventimpl += ' ' * 8 + 'else\n'
          if promise:
            eventimpl += ' ' * 12 + "let p = Promise[(%sAsyncStateMachine[T], T)]\n" % prefix
            eventimpl += ' ' * 12 + "p((this, ctx))\n"
            eventimpl += ' ' * 12 + "p\n"
          else:
            eventimpl += ' ' * 12 + 'ctx\n'
        eventimpl += ' ' * 8 + 'end\n'
      eventimpl += '\n'

    delegates_in_action = []
    if need_action_delegate:
      if promise:
        delegates_in_action.append('action_delegate: {0}AsyncActionDelegate[T]'.format(prefix))
      else:
        delegates_in_action.append('action_delegate: {0}ActionDelegate[T] val'.format(prefix))
    if need_variable_delegate:
      if promise:
        delegates_in_action.append('variable_delegate: {0}AsyncVariableDelegate[T]'.format(prefix))
      else:
        delegates_in_action.append('variable_delegate: {0}VariableDelegate[T] val'.format(prefix))
    if promise:
      actionimpl = 'interface val _{0}AsyncAction[T: Any #share]\n'.format(prefix)
      actionimpl += ' ' * 4 + 'fun apply({0}): Promise[T]\n\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
      actionimpl += 'primitive _{0}AsyncNoop[T: Any #share]\n'.format(prefix)
      actionimpl += ' ' * 4 + 'fun apply({0}): Promise[T] =>\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
      actionimpl += ' ' * 8 + 'let p = Promise[T]\n'
      actionimpl += ' ' * 8 + 'p(ctx0)\n'
      actionimpl += ' ' * 8 + 'p\n\n'
    else:
      actionimpl = 'interface val _{0}Action[T: Any ref]\n'.format(prefix)
      actionimpl += ' ' * 4 + 'fun apply({0}): T\n\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
      actionimpl += 'primitive _{0}Noop[T: Any ref]\n'.format(prefix)
      actionimpl += ' ' * 4 + 'fun apply({0}): T => ctx0\n\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
    for state in states:
      for transition in state.transitions:
        if len(transition.actions) == 0:
          continue
        elif len(transition.actions) == 1:
          if isinstance(transition.actions[0], Call):
            args = ''.join([str(x) for x in transition.actions[0].operands])
            actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
          elif isinstance(transition.actions[0], Assignment):
            actionblock = str(transition.actions[0])
          else:
            continue
        else:
          actionblock = ', '.join(['%s: %s' % (x.name, x.type) for x in transition.event.parameters]) + '\n' + '\n'.join([str(x) for x in transition.actions])
        (action, generated) = actionblocks[actionblock]
        if generated:
          continue
        actionfun = action
        actionblocks[actionblock] = (action, True)

        if promise:
          actionimpl += 'primitive {0}[T: Any #share]\n'.format(actionfun.replace('_' + prefix, '_' + prefix + 'Async'))
          actionimpl += ' ' * 4 + 'fun apply({0}): Promise[T] =>\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
        else:
          actionimpl += 'primitive {0}[T: Any ref]\n'.format(actionfun)
          actionimpl += ' ' * 4 + 'fun apply({0}): T =>\n'.format(', '.join(delegates_in_action + ["ctx0: T"] + optional_action_parameter_signatures))
        used_params = _get_used_parameters(transition)
        actionimpl += _generate_recursive_match(8, used_params, {}, transition, promise)
        actionimpl += '\n'

    if promise:
      code = 'class val {0}AsyncStateMachine[T: Any #share]\n'.format(prefix)
      code += ' ' * 4 + 'let state: I32\n'
    else:
      code = 'class {0}StateMachine[T: Any ref]\n'.format(prefix)
      code += ' ' * 4 + 'var state: I32\n'
    code += ' ' * 4 + 'let _logger: (Logger[String] | None)\n'
    constructor_arguments = []
    if need_action_delegate:
      if promise:
        code += ' ' * 4 + 'let action_delegate: {0}AsyncActionDelegate[T]\n'.format(prefix)
        constructor_arguments.append("action_delegate': {0}AsyncActionDelegate[T]".format(prefix))
      else:
        code += ' ' * 4 + 'var action_delegate: {0}ActionDelegate[T] val\n'.format(prefix)
        constructor_arguments.append("action_delegate': {0}ActionDelegate[T] val".format(prefix))
    if need_guard_delegate:
      if promise:
        code += ' ' * 4 + 'let guard_delegate: {0}AsyncGuardDelegate[T]\n'.format(prefix)
        constructor_arguments.append("guard_delegate': {0}AsyncGuardDelegate[T]".format(prefix))
      else:
        code += ' ' * 4 + 'var guard_delegate: {0}GuardDelegate[T] val\n'.format(prefix)
        constructor_arguments.append("guard_delegate': {0}GuardDelegate[T] val".format(prefix))
    if need_variable_delegate:
      if promise:
        code += ' ' * 4 + 'let variable_delegate: {0}AsyncVariableDelegate[T]\n'.format(prefix)
        constructor_arguments.append("variable_delegate': {0}AsyncVariableDelegate[T]".format(prefix))
      else:
        code += ' ' * 4 + 'var variable_delegate: {0}VariableDelegate[T] val\n'.format(prefix)
        constructor_arguments.append("variable_delegate': {0}VariableDelegate[T] val".format(prefix))
    code += ' ' * 4 + 'let _transition_states: Array[I32] = [\n            {0}\n        ]\n'.format('\n            '.join(['; '.join([str(y) for y in x]) for x in targetstable]))
    if promise:
      code += ' ' * 4 + 'let _transition_actions: Array[_{1}AsyncAction[T]] = [\n            {0}\n        ]\n'.format('\n            '.join(['; '.join([y.replace('_' + prefix, '_' + prefix + 'Async') + '[T]' for y in x]) for x in actionstable]), prefix)
    else:
      code += ' ' * 4 + 'let _transition_actions: Array[_{1}Action[T]] = [\n            {0}\n        ]\n'.format('\n            '.join(['; '.join([y + '[T]' for y in x]) for x in actionstable]), prefix)
    if debug:
      state_strings = ['"N/A"'] + ['"{0}"'.format(str(x.name).replace('"', '\\"').replace('\n', '\\n')) for x in states]
      code += ' ' * 4 + 'let _state_strings: Array[String] = [{0}]\n'.format("; ".join(state_strings))
      code += ' ' * 4 + 'let _action_strings: Array[String] = [\n            {0}\n        ]\n'.format('\n            '.join(['; '.join(['"{0}"'.format(str(y).replace('"', '\\"')) for y in x]) for x in actionstringstable]))
    code += '\n'
    constructor_arguments.append("state': I32 = {0}()".format(prefix + _to_capitalize(_pony_normalize(states[0].name))))
    constructor_arguments.append('logger: (Logger[String] | None) = None')
    if promise:
      code += ' ' * 4 + 'new val create({0}) =>\n'.format(', '.join(constructor_arguments))
    else:
      code += ' ' * 4 + 'new create({0}) =>\n'.format(', '.join(constructor_arguments))
    code += ' ' * 8 + "state = state'\n"
    if need_action_delegate:
      code += ' ' * 8 + "action_delegate = action_delegate'\n"
    if need_guard_delegate:
      code += ' ' * 8 + "guard_delegate = guard_delegate'\n"
    if need_variable_delegate:
      code += ' ' * 8 + "variable_delegate = variable_delegate'\n"
    code += ' ' * 8 + '_logger = logger\n'
    code += '\n'
    return actionimpl + code + eventimpl
#+end_src
*** utility
#+begin_src python :noweb-ref utility
  _pony_builtin_types = ['Int', 'Float', 'Number', 'String', 'Bool', 'Array', 'List']

  def _to_capitalize(string: str) -> str:
    result = ''.join([x.capitalize() for x in string.replace(' ', '_').replace('-', '_').replace('__', '_').replace('__', '_').split('_')])
    if result in _pony_builtin_types:
      return "My" + result
    else:
      return result

  def _pony_normalize(string: str) -> str:
    keywords = ["box", "iso", "ref", "tag", "trn", "val", "actor", "addressof", "as", "be", "break", "class", "compiler_intrinsic", "consume", "continue", "create", "do", "else", "elseif", "embed", "end", "error", "for", "fun", "if", "ifdef", "in", "interface", "is", "isnt", "lambda", "let", "match", "new", "not", "object", "primitive", "recover", "repeat", "return", "struct", "then", "this", "trait", "try", "type", "until", "use", "var", "where", "while", "with", "actor", "be", "class", "else", "for", "fun", "if", "ifdef", "interface", "match", "new", "primitive", "recover", "ref", "repeat", "struct", "tag", "then", "trait", "try", "until", "while", "with", "false", "true", "None"]
    string = string.strip()
    if string == '-':
      string = 'minus'
    elif string == '_':
      string = 'underline'
    elif string.startswith('-'):
      string = string.replace('-', 'minus', 1)
    result = normalize(string.replace('-', ' ').replace('_', ' ')).lower()
    if result in keywords:
      return 'my_' + result
    else:
      return result

  def _to_pony_primitive_type(origin_type: str) -> str:
    types = {
      "bool": "Bool",
      "char": "U8",
      "int": "Int",
      "long": "ILong",
      "float": "Float",
      "number": "Number",
      "string": "String",
    }
    if origin_type in types:
      return types[origin_type]
    else:
      return _to_capitalize(origin_type)

  def _parameter_to_pony_signature(p: Parameter) -> str:
    if p.type in _pony_builtin_types:
      return '%s: %s' % (p.name, p.type)
    else:
      return '%s: %s' % (p.name, _to_pony_primitive_type(str(p.type)))

  def _action_parameter_signatures(events: List[Event]) -> List[str]:
    parameters = {}
    for evt in events:
      for param in evt.parameters:
        parameters[_parameter_to_pony_signature(param)] = param
    return [_parameter_to_pony_signature(x) for x in parameters.values()]

  def _optional_action_parameter_signatures(events: List[Event]) -> List[str]:
    parameters = {}
    for evt in events:
      for param in evt.parameters:
        parameters[_parameter_to_pony_signature(param)] = param
    return ['{0}: ({1} | None)'.format(x.split(':')[0], x.split(':')[1].strip()) for x in [_parameter_to_pony_signature(x) for x in parameters.values()]]

  def _get_used_parameters(transition: Transition) -> List[Parameter]:
    params = {}
    for action in transition.actions:
      if isinstance(action, Call):
        for arg in action.operands:
          if isinstance(arg, Identifier):
            for param in transition.event.parameters:
              if str(arg) == str(param.name):
                params[str(arg)] = param
      elif isinstance(action, Assignment):
        if isinstance(action.expression, Call):
          for arg in action.expression.operands:
            if isinstance(arg, Identifier):
              for param in transition.event.parameters:
                if str(arg) == str(param.name):
                  params[str(arg)] = param
    return [x for x in params.values()]

  def _generate_action_body(indent: int, transition: Transition, renamed_args: Mapping[str, str]) -> str:
    code = ''
    idx = 0
    varidx = 0
    for action in transition.actions:
      if isinstance(action, Call):
        used_args = []
        keys = renamed_args.keys()
        for operand in action.operands:
          if str(operand.name) in keys:
            used_args.append(renamed_args[str(operand.name)])
        code += ' ' * indent + 'let ctx{0} = action_delegate.{1}({2})\n'.format(idx + 1, _pony_normalize(str(action.operator)), ', '.join(['ctx%d' % idx] + used_args))
      elif isinstance(action, Assignment):
        if isinstance(action.expression, Identifier):
          code += ' ' * indent + '(let ctx{0}, let var{1}) = action_delegate.{2}(ctx{3})\n'.format(idx + 1, varidx, _pony_normalize(str(action.expression)), idx)
          code += ' ' * indent + 'variable_delegate.on_%s_changed(ctx%d, var%d)\n' % (str(action.target).lower(), idx + 1, varidx)
          varidx += 1
        elif isinstance(action.expression, Call):
          call = action.expression
          used_args = []
          keys = renamed_args.keys()
          for operand in call.operands:
            if str(operand.name) in keys:
              used_args.append(renamed_args[str(operand.name)])
          code += ' ' * indent + '(let ctx{0}, let var{1}) = action_delegate.{2}({3})\n'.format(idx + 1, varidx, _pony_normalize(str(call.operator)), ', '.join(['ctx%d' % idx] + used_args))
          code += ' ' * indent + 'variable_delegate.on_%s_changed(ctx%d, var%d)\n' % (str(action.target).lower(), idx + 1, varidx)
          varidx += 1
        else:
          code += ' ' * indent + '(let ctx{0}, let {1}) = action_delegate.{2}(ctx{3});\n'.format(idx + 1, str(action.target), _pony_normalize(str(action.expression)), idx)
          code += ' ' * indent + 'variable_delegate.on_%s_changed(ctx%d, %d)\n' % (str(action.target).lower(), idx + 1, varidx)
          varidx += 1
      idx += 1
    code += ' ' * indent + 'ctx{0}\n'.format(idx)
    return code

  def _generate_recursive_action_body(indent: int, depth: int, actions: List[Union[Assignment, Call]], renamed_args: Mapping[str, str]) -> str:
    if len(actions) == 0:
      return ' ' * indent + 'p{0}(ctx{0})\n'.format(depth)
    else:
      code = ''
      action = actions.pop(0)
      if isinstance(action, Call):
        used_args = []
        keys = renamed_args.keys()
        for operand in action.operands:
          if str(operand.name) in keys:
            used_args.append(renamed_args[str(operand.name)])
        if depth == 0 and len(actions) == 0:
          code += ' ' * indent + 'action_delegate.{operator}({args})\n'.format(operator = _pony_normalize(str(action.operator)), args = ', '.join(['ctx%d' % depth] + used_args))
        else:
          code += ' ' * indent + 'action_delegate.{operator}({args}).next[None]({{(ctx{nextdepth}: T) =>\n'.format(depth = depth, nextdepth = depth + 1, operator = _pony_normalize(str(action.operator)), args = ', '.join(['ctx%d' % depth] + used_args))
          code += ' ' * (indent + 4) + 'let p{nextdepth} = p{depth}\n'.format(depth = depth, nextdepth = depth + 1)
          code += '{nextcode}'.format(nextcode = _generate_recursive_action_body(indent + 4, depth + 1, actions, renamed_args))
          code += ' ' * (indent + 4) + 'None\n'
          code += ' ' * indent + '})\n'
      elif isinstance(action, Assignment):
        if isinstance(action.expression, Identifier):
          code += ' ' * indent + 'action_delegate.{operator}({args}).next[None]({{(tup{nextdepth}: (T, {vartype})) =>\n'.format(depth = depth, nextdepth = depth + 1, varidx = depth, varname = _pony_normalize(str(action.target)), vartype = _to_pony_primitive_type(str(action.type)), operator = _pony_normalize(str(action.expression)), args = ', '.join(['ctx%d' % depth] + used_args))
          code += ' ' * (indent + 4) + 'variable_delegate.on_{varname}_changed(tup{nextdepth}._1, tup{nextdepth}._2)\n'.format(depth = depth, nextdepth = depth + 1, varname = _pony_normalize(str(action.target)))
          code += ' ' * (indent + 4) + 'let ctx{nextdepth} = tup{nextdepth}._1\n'.format(depth = depth, nextdepth = depth + 1)
          code += ' ' * (indent + 4) + 'let p{nextdepth} = p{depth}\n'.format(depth = depth, nextdepth = depth + 1)
          code += '{nextcode}'.format(nextcode = _generate_recursive_action_body(indent + 4, depth + 1, actions, renamed_args))
          code += ' ' * (indent + 4) + 'None\n'
          code += ' ' * indent + '})\n'
        elif isinstance(action.expression, Call):
          call = action.expression
          used_args = []
          keys = renamed_args.keys()
          for operand in call.operands:
            if str(operand.name) in keys:
              used_args.append(renamed_args[str(operand.name)])
          code += ' ' * indent +  'action_delegate.{operator}({args}).next[None]({{(tup{nextdepth}: (T, {vartype})) =>\n'.format(depth = depth, nextdepth = depth + 1, varidx = depth, varname = _pony_normalize(str(action.target)), vartype = _to_pony_primitive_type(str(action.type)), operator = _pony_normalize(str(call.operator)), args = ', '.join(['ctx%d' % depth] + used_args))
          code += ' ' * (indent + 4) +  'variable_delegate.on_{varname}_changed(tup{nextdepth}._1, tup{nextdepth}._2)\n'.format(depth = depth, nextdepth = depth + 1, varname = _pony_normalize(str(action.target)))
          code += ' ' * (indent + 4) +  'let ctx{nextdepth} = tup{nextdepth}._1\n'.format(depth = depth, nextdepth = depth + 1)
          code += ' ' * (indent + 4) +  'let p{nextdepth} = p{depth}\n'.format(depth = depth, nextdepth = depth + 1)
          code += '{nextcode}'.format(nextcode = _generate_recursive_action_body(indent + 4, depth + 1, actions, renamed_args))
          code += ' ' * (indent + 4) +  'None\n'
          code += ' ' * indent + '})\n'
        else:
          code += ' ' * indent + 'action_delegate.{operator}({args}).next[None]({{(tup{nextdepth}: (T, {vartype})) =>\n'.format(depth = depth, nextdepth = depth + 1, varidx = depth, varname = _pony_normalize(str(action.target)), vartype = _to_pony_primitive_type(str(action.type)), operator = _pony_normalize(str(action.expression)), args = ', '.join(['ctx%d' % depth] + used_args))
          code += ' ' * (indent + 4) + 'variable_delegate.on_{varname}_changed(tup{nextdepth}._1, tup{nextdepth}._2)\n'.format(depth = depth, nextdepth = depth + 1, varidx = depth, varname = _pony_normalize(str(action.target)))
          code += ' ' * (indent + 4) + 'let ctx{nextdepth} = tup{nextdepth}._1\n'.format(depth = depth, nextdepth = depth + 1)
          code += ' ' * (indent + 4) + 'let p{nextdepth} = p{depth}\n'.format(depth = depth, nextdepth = depth + 1)
          code += '{nextcode}'.format(nextcode = _generate_recursive_action_body(indent + 4, depth + 1, actions, renamed_args))
          code += ' ' * (indent + 4) + 'None\n'
          code += ' ' * indent + '})\n'
    return code

  def _generate_recursive_match(indent: int, used_params: List[Parameter], renamed_args: Mapping[str, str], transition: Transition, promise: bool) -> str:
    code = ''
    if len(used_params) == 0:
      if promise:
        if len(transition.actions) == 1 and isinstance(transition.actions[0], Call):
          return '{body}\n'.format(body = _generate_recursive_action_body(indent, 0, transition.actions, renamed_args))
        else:
          code += ' ' * indent + 'let p0 = Promise[T]\n'
          code += '{body}'.format(body = _generate_recursive_action_body(indent, 0, transition.actions, renamed_args))
          code += ' ' * indent + 'p0\n'
          return code
      else:
        return _generate_action_body(indent, transition, renamed_args)
    else:
      param = used_params.pop(0)
      renamed_param = Parameter(Identifier('arg%d' % indent), param.type)
      renamed_args[str(param.name)] = 'arg%d' % indent
      code += ' ' * indent + 'match {0}\n'.format(param.name)
      if promise:
        if len(transition.actions) == 1 and isinstance(transition.actions[0], Call):
          code += ' ' * indent + '| let {signature} => {body}\n'.format(signature = _parameter_to_pony_signature(renamed_param), body = _generate_recursive_match(indent + 4, used_params, renamed_args, transition, promise).strip())
        else:
          code += ' ' * indent + '| let {0} =>\n'.format(_parameter_to_pony_signature(renamed_param))
          code += ' ' * (indent + 4) + '{0}\n'.format(_generate_recursive_match(indent + 4, used_params, renamed_args, transition, promise).strip())
        code += ' ' * indent + '| None => let p = Promise[T]; p(ctx0); p\n'
      else:
        code += ' ' * indent + '| let {0} =>\n{1}\n'.format(_parameter_to_pony_signature(renamed_param), ' ' * (indent + 4) + _generate_recursive_match(indent + 4, used_params, renamed_args, transition, promise).strip())
        code += ' ' * indent + '| None => ctx0\n'
      code += ' ' * indent + 'end\n'
      return code
#+end_src
