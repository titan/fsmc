#+STARTUP: indent

* Analyzer

** framework
#+begin_src python :tangle ${BUILDDIR}/analyzer.py
  from typing import List, NewType, Union
  from abc import ABC, abstractmethod
  from parameter_fsm import ActionDelegate as ParameterActionDelegate, GuardDelegate as ParameterGuardDelegate, VariableDelegate as ParameterVariableDelegate, StateMachine as ParameterStateMachine
  from action_fsm import ActionDelegate as ActionActionDelegate, GuardDelegate as ActionGuardDelegate, VariableDelegate as ActionVariableDelegate, StateMachine as ActionStateMachine
  from guard_fsm import ActionDelegate as GuardActionDelegate, GuardDelegate as GuardGuardDelegate, VariableDelegate as GuardVariableDelegate, StateMachine as GuardStateMachine
  from model import Parameter
  from semantic import Expression, Assignment, Identifier, Literal, Delimiter, Call, BoolExpression, UnaryBoolExpression, BinaryBoolExpression, CompareExpression, Accessor, Fun, Var, Type, UnionType, ListType, MapType


  <<utility>>


  <<parameter>>


  <<action>>


  <<guard>>
#+end_src

** parameter syntaxer
*** framework
#+begin_src python :noweb-ref parameter
  <<parameter-context>>


  <<parameter-delegate>>


  class ParameterSyntaxer:

    def __init__(self):
      self._fsm = ParameterStateMachine(_ParameterActionDelegate(), None, None)
      self._ctx = _ParameterContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._fsm.identifier(self._ctx, id)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._fsm.delimiter(self._ctx, d)
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._fsm.eof(self._ctx, 0)
      self._consume_queue()

    def result(self):
      return self._ctx.parameters

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        if isinstance(n, Var):
          self._fsm.var(self._ctx, n)
        elif isinstance(n, Type):
          self._fsm.type(self._ctx, n)
        elif isinstance(n, UnionType):
          self._fsm.union_type(self._ctx, n)
        elif isinstance(n, ListType):
          self._fsm.list_type(self._ctx, n)
        elif isinstance(n, MapType):
          self._fsm.map_type(self._ctx, n)
        elif isinstance(n, Parameter):
          self._fsm.parameter(self._ctx, n)
        elif isinstance(n, list):
          self._fsm.parameters(self._ctx, n)
        elif isinstance(n, int):
          self._fsm.eof(self._ctx, n)
      while len(self._ctx.delay_queue) > 0:
        n = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        if isinstance(n, Var):
          self._fsm.var(self._ctx, n)
        elif isinstance(n, Type):
          self._fsm.type(self._ctx, n)
        elif isinstance(n, UnionType):
          self._fsm.union_type(self._ctx, n)
        elif isinstance(n, ListType):
          self._fsm.list_type(self._ctx, n)
        elif isinstance(n, MapType):
          self._fsm.map_type(self._ctx, n)
        elif isinstance(n, Parameter):
          self._fsm.parameter(self._ctx, n)
        elif isinstance(n, list):
          self._fsm.parameters(self._ctx, n)
        elif isinstance(n, int):
          self._fsm.eof(self._ctx, n)


  <<parameter-adapter>>
#+end_src
*** bnf
#+begin_src text
  target = parameters $$

  parameters = parameters , parameter
             | parameter

  parameter = var : type

  var = identifier

  type = common-type
       | union-type

  common-type = identifier
              | container-type

  container-type = list-type
                 | map-type

  union-type = common-type "|" common-type
             | union-type "|" common-type

  list-type = [ type ]

  map-type = { type : type }
#+end_src
*** fsm defination
#+begin_src json :tangle ${BUILDDIR}/parameter-fsm.json
  {
    "variables": [],
    "events": [
      {
        "name": "identifier",
        "parameters": [
          {
            "name": "id",
            "type": "identifier"
          }
        ]
      },
      {
        "name": "delimiter",
        "parameters": [
          {
            "name": "d",
            "type": "delimiter"
          }
        ]
      },
      {
        "name": "parameters",
        "parameters": [
          {
            "name": "ps",
            "type": "parameters"
          }
        ]
      },
      {
        "name": "parameter",
        "parameters": [
          {
            "name": "p",
            "type": "parameter"
          }
        ]
      },
      {
        "name": "var",
        "parameters": [
          {
            "name": "v",
            "type": "var"
          }
        ]
      },
      {
        "name": "type",
        "parameters": [
          {
            "name": "t",
            "type": "type"
          }
        ]
      },
      {
        "name": "union_type",
        "parameters": [
          {
            "name": "ut",
            "type": "uniontype"
          }
        ]
      },
      {
        "name": "list_type",
        "parameters": [
          {
            "name": "lt",
            "type": "listtype"
          }
        ]
      },
      {
        "name": "map_type",
        "parameters": [
          {
            "name": "mt",
            "type": "maptype"
          }
        ]
      },
      {
        "name": "eof",
        "parameters": [
          {
            "name": "e",
            "type": "int"
          }
        ]
      }
    ],
    "states": [
      {
        "name": "target -> \u00b7 parameters $$\nparameters -> \u00b7 parameters , parameter\nparameters -> \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to var"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "shift(ps)"
            ],
            "event": "parameters",
            "target": "target -> parameters \u00b7 $$\nparameters -> parameters \u00b7 , parameter"
          },
          {
            "actions": [
              "shift(p)",
              "reduce 1 to parameters"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "shift(v)"
            ],
            "event": "var",
            "target": "parameter -> var \u00b7 : type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "target -> parameters \u00b7 $$\nparameters -> parameters \u00b7 , parameter",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','",
            "target": "parameters -> parameters , \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "shift(e)",
              "reduce to target"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameters -> parameters , \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to var"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "shift(p)",
              "reduce 2 to parameters"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "shift(v)"
            ],
            "event": "var",
            "target": "parameter -> var \u00b7 : type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var \u00b7 : type",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'",
            "target": "parameter -> var : \u00b7 type\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var : \u00b7 type\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "parameter -> var : type \u00b7\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var : type \u00b7\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "reduce to parameter",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "reduce to parameter",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to union_type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to union_type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to union_type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "list_type -> [ type \u00b7 ]\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "list_type -> [ type \u00b7 ]\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "shift(d)",
              "reduce to list_type"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "map_type -> { type \u00b7 : type }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type \u00b7 : type }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'",
            "target": "map_type -> { type : \u00b7 type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type : \u00b7 type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "map_type -> { type : type \u00b7 }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type : type \u00b7 }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "shift(d)",
              "reduce to map_type"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      }
    ]
  }
#+end_src
*** context
#+begin_src python :noweb-ref parameter-context
  class _ParameterContext:
    parameters: List[Parameter]

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.stack = []
      self.parameters = []
#+end_src
*** delegate
#+begin_src python :noweb-ref parameter-delegate
  class _ParameterActionDelegate(ParameterActionDelegate):

    def shift(self, ctx, d):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.stack.append(d)

    def reduce_to_var(self, ctx):
      var = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.queue.append(Var(var))

    def syntax_error(self, ctx):
      print("syntax error in parameter syntaxer")

    def quit(self, ctx):
      exit(1)

    def reduce_1_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.stack.pop()
      parameters = [ parameter ]
      ctx.queue.append(parameters)

    def reduce_2_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.stack.pop()
      parameters = ctx.stack.pop()
      parameters.append(parameter)
      ctx.queue.append(parameters)

    def reduce_to_target(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      parameters = ctx.stack.pop()
      if isinstance(parameters, list):
        ctx.parameters = parameters
      else:
        ctx.parameters.append(parameters)

    def reduce_to_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      if isinstance(type, Identifier):
        t = Type(0, type)
      else:
        t = Type(type.kind, type)
      ctx.queue.append(t)

    def reduce_to_parameter(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      var = ctx.stack.pop()
      parameter = Parameter(var, type)
      ctx.queue.append(parameter)

    def enqueue(self, ctx, e):
      ctx.delay_queue.append(e)

    def reduce_to_union_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      a = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      b = ctx.stack.pop()
      if isinstance(b, UnionType):
        b.types.append(a)
        ctx.queue.append(b)
      else:
        u = UnionType()
        u.types.append(b)
        u.types.append(a)
        ctx.queue.append(u)

    def reduce_to_list_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.queue.append(ListType(type))

    def reduce_to_map_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      valtype = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      keytype = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.queue.append(MapType(keytype, valtype))
#+end_src
*** lex adapter
#+begin_src python :noweb-ref parameter-adapter
  class ParameterLexerAdapter:

    def __init__(self, syntaxer: ParameterSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in parameter lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src

** guard syntaxer
*** framework
#+begin_src python :noweb-ref guard
  <<guard-context>>


  <<guard-delegate>>


  class GuardSyntaxer:

    def __init__(self):
      self._fsm = GuardStateMachine(_GuardActionDelegate(), None, None)
      self._ctx = _GuardContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._fsm.identifier(self._ctx, id)
      self._consume_queue()

    def literal(self, l):
      self._consume_queue()
      self._fsm.literal(self._ctx, l)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._fsm.delimiter(self._ctx, d)
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._fsm.eof(self._ctx, 0)
      self._consume_queue()

    def result(self):
      return self._ctx.guard

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        self._feed(n)
      while len(self._ctx.delay_queue) > 0:
        while len(self._ctx.queue) > 0:
          n = self._ctx.queue[0]
          self._ctx.queue = self._ctx.queue[1:]
          self._feed(n)
        d = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        self._feed(d)

    def _feed(self, n):
      if isinstance(n, BoolExpression):
        self._fsm.bool_expression(self._ctx, n)
      elif isinstance(n, CompareExpression):
        self._fsm.compare_expression(self._ctx, n)
      elif isinstance(n, Expression):
        self._fsm.expression(self._ctx, n)
      elif isinstance(n, Call):
        self._fsm.call(self._ctx, n)
      elif isinstance(n, Fun):
        self._fsm.fun(self._ctx, n)
      elif isinstance(n, Accessor):
        self._fsm.accessor(self._ctx, n)
      elif isinstance(n, Identifier):
        self._fsm.identifier(self._ctx, n)
      elif isinstance(n, Literal):
        self._fsm.literal(self._ctx, n)
      elif isinstance(n, Delimiter):
        self._fsm.delimiter(self._ctx, n)
      elif isinstance(n, list):
        self._fsm.operands(self._ctx, n)
      elif isinstance(n, int):
        self._fsm.eof(self._ctx, n)

  <<guard-adapter>>
#+end_src
*** bnf
#+begin_src text
  guard = bool-expression

  bool-expression = bool-expression and bool-expression
                  | bool-expression or bool-expression
                  | not boo-expression
                  | compare-expression
                  | ( bool-expression )
                  | expression

  compare-expression = expression == expression
                     | expression != expression
                     | expression >  expression
                     | expression >= expression
                     | expression <  expression
                     | expression <= expression

  expression = call
             | accessor
             | literal
             | identifier

  call = fun ( operands )
       | fun ( )

  fun = fun identifier
      | fun literal
      | identifier

  operands = expression
           | operands , expression

  accessor = accessor . identifier
           | identifier . identifier
#+end_src

*** fsm defination
#+begin_src json :tangle ${BUILDDIR}/guard-fsm.json
  {
    "variables": [],
    "events": [
      {
        "name": "identifier",
        "parameters": [
          {
            "name": "i",
            "type": "Identifier"
          }
        ]
      },
      {
        "name": "literal",
        "parameters": [
          {
            "name": "l",
            "type": "Literal"
          }
        ]
      },
      {
        "name": "delimiter",
        "parameters": [
          {
            "name": "d",
            "type": "Delimiter"
          }
        ]
      },
      {
        "name": "bool_expression",
        "parameters": [
          {
            "name": "e",
            "type": "BoolExpression"
          }
        ]
      },
      {
        "name": "compare_expression",
        "parameters": [
          {
            "name": "e",
            "type": "CompareExpression"
          }
        ]
      },
      {
        "name": "expression",
        "parameters": [
          {
            "name": "e",
            "type": "Expression"
          }
        ]
      },
      {
        "name": "call",
        "parameters": [
          {
            "name": "c",
            "type": "Call"
          }
        ]
      },
      {
        "name": "fun",
        "parameters": [
          {
            "name": "f",
            "type": "Fun"
          }
        ]
      },
      {
        "name": "operands",
        "parameters": [
          {
            "name": "o",
            "type": "[Call | Literal | Identifier]"
          }
        ]
      },
      {
        "name": "accessor",
        "parameters": [
          {
            "name": "a",
            "type": "Accessor"
          }
        ]
      },
      {
        "name": "eof",
        "parameters": [
          {
            "name": "e",
            "type": "int"
          }
        ]
      }
    ],
    "states": [
      {
        "name": "guard -> \u00b7 bool-expr $$\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\"",
            "target": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "bool_expression",
            "target": "guard -> bool-expr \u00b7 $$\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to bool expr"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "expression",
            "target": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "guard -> bool-expr \u00b7 $$\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\"",
            "target": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\"",
            "target": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "shift(e)",
              "reduce to guard"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\"",
            "target": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "bool_expression",
            "target": "bool-expr -> bool-expr and bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to bool expr"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "expression",
            "target": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> bool-expr and bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\"",
            "target": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\"",
            "target": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce 3 to bool expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "reduce 3 to bool expr",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\"",
            "target": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "bool_expression",
            "target": "bool-expr -> bool-expr or bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to bool expr"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "expression",
            "target": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> bool-expr or bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\"",
            "target": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\"",
            "target": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce 3 to bool expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "reduce 3 to bool expr",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\"",
            "target": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "bool_expression",
            "target": "bool-expr -> not bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to bool expr"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "expression",
            "target": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> not bool-expr \u00b7\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\"",
            "target": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\"",
            "target": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce 2 to bool expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "reduce 2 to bool expr",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\"",
            "target": "bool-expr -> not \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "bool-expr -> ( \u00b7 bool-expr )\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "bool_expression",
            "target": "bool-expr -> ( bool-expr \u00b7 )\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to bool expr"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)"
            ],
            "event": "expression",
            "target": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> ( bool-expr \u00b7 )\nbool-expr -> bool-expr \u00b7 and bool-expr\nbool-expr -> bool-expr \u00b7 or bool-expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\"",
            "target": "bool-expr -> bool-expr and \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\"",
            "target": "bool-expr -> bool-expr or \u00b7 bool-expr\nbool-expr -> \u00b7 bool-expr and bool-expr\nbool-expr -> \u00b7 bool-expr or bool-expr\nbool-expr -> \u00b7 not bool-expr\nbool-expr -> \u00b7 cmp-expr\nbool-expr -> \u00b7 ( bool-expr )\nbool-expr -> \u00b7 expr\ncmp-expr -> \u00b7 expr == expr\ncmp-expr -> \u00b7 expr != expr\ncmp-expr -> \u00b7 expr >  expr\ncmp-expr -> \u00b7 expr >= expr\ncmp-expr -> \u00b7 expr <  expr\ncmp-expr -> \u00b7 expr <= expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "shift(d)",
              "reduce 3 to bool expr"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "bool-expr -> expr \u00b7\ncmp-expr -> expr \u00b7 == expr\ncmp-expr -> expr \u00b7 != expr\ncmp-expr -> expr \u00b7 >  expr\ncmp-expr -> expr \u00b7 >= expr\ncmp-expr -> expr \u00b7 <  expr\ncmp-expr -> expr \u00b7 <= expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce 1 to bool expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\"",
            "target": "cmp-expr -> expr == \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\"",
            "target": "cmp-expr -> expr != \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\"",
            "target": "cmp-expr -> expr >  \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun ->  \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\"",
            "target": "cmp-expr -> expr >= \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\"",
            "target": "cmp-expr -> expr <  \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\"",
            "target": "cmp-expr -> expr <= \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "reduce 1 to bool expr",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr == \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr != \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr <  \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr <= \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr >  \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun ->  \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "cmp-expr -> expr >= \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to cmp expr"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit",
        "transactions": [
          {
            "actions": [
              "shift(i)",
              "reduce 2 to fun"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(l)",
              "reduce 2 to fun"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\"",
            "target": "call -> fun ( \u00b7 operands )\ncall -> fun ( \u00b7 )\noperands -> \u00b7 expr\noperands -> \u00b7 operands , expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun ( \u00b7 operands )\ncall -> fun ( \u00b7 )\noperands -> \u00b7 expr\noperands -> \u00b7 operands , expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "shift(d)",
              "reduce 3 to call"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 1 to operands"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "shift(o)"
            ],
            "event": "operands",
            "target": "call -> fun ( operands \u00b7 )\noperands -> operands \u00b7 , expr"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun ( operands \u00b7 )\noperands -> operands \u00b7 , expr",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "shift(d)",
              "reduce 4 to call"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\"",
            "target": "operands -> operands , \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "operands -> operands , \u00b7 expr\nexpr -> \u00b7 call\nexpr -> \u00b7 accessor\nexpr -> \u00b7 lit\nexpr -> \u00b7 id\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\nfun -> \u00b7 fun id\nfun -> \u00b7 fun lit\nfun -> \u00b7 id\naccessor -> \u00b7 accessor dot id\naccessor -> \u00b7 id dot id",
        "transactions": [
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id"
          },
          {
            "actions": [
              "shift(l)",
              "reduce to expr"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "shift(e)",
              "reduce 3 to operands"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "shift(c)",
              "reduce to expr"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\nfun -> fun \u00b7 id\nfun -> fun \u00b7 lit"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(a)"
            ],
            "event": "accessor",
            "target": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "expr -> id \u00b7\nfun -> id \u00b7\naccessor -> id \u00b7 dot id",
        "transactions": [
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(i)"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(l)"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\"",
            "target": "accessor -> id dot \u00b7 id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "expr -> accessor \u00b7\naccessor -> accessor \u00b7 dot id",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(i)"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "reduce to expr",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\"",
            "target": "accessor -> accessor dot \u00b7 id"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "accessor -> accessor dot \u00b7 id",
        "transactions": [
          {
            "actions": [
              "shift(i)",
              "reduce to accessor"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "accessor -> id dot \u00b7 id",
        "transactions": [
          {
            "actions": [
              "shift(i)",
              "reduce to accessor"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"and\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"or\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier",
            "guard": "i.name == \"not\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"(\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \")\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"==\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"!=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \">=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \"<=\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \",\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == \".\""
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "bool_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "compare_expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "expression"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "accessor"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      }
    ]
  }
#+end_src

*** context
#+begin_src python :noweb-ref guard-context
  class _GuardContext:
    guard: BoolExpression

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.stack = []
      self.guard = None
#+end_src
*** delegate
#+begin_src python :noweb-ref guard-delegate
  class _GuardActionDelegate(GuardActionDelegate):

    def shift(self, ctx, l):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.stack.append(l)

    def syntax_error(self, ctx):
      print("syntax error in guard syntaxer")

    def quit(self, ctx):
      exit(1)

    def enqueue(self, ctx, e):
      ctx.delay_queue.append(e)

    def reduce_to_guard(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.guard = ctx.stack.pop()

    def reduce_1_to_bool_expr(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.stack.pop()
      ctx.queue.append(BoolExpression(expr))

    def reduce_2_to_bool_expr(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.stack.pop()
      ctx.queue.append(UnaryBoolExpression(op, expr))

    def reduce_3_to_bool_expr(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.stack.pop()
      ctx.queue.append(BinaryBoolExpression(expr1, op, expr2))

    def reduce_3_to_cmp_expr(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.stack.pop()
      ctx.queue.append(CompareExpression(expr1, op, expr2))

    def reduce_to_expr(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.stack.pop()
      ctx.queue.append(Expression(expr))

    def reduce_3_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_4_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      ctx.queue.append(Call(fun, operands))

    def reduce_1_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.queue.append(Fun(id))

    def reduce_2_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      fun.names.append(id)
      ctx.queue.append(fun)

    def reduce_1_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.stack.pop()
      ctx.queue.append([expr])

    def reduce_3_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.stack.pop()
      operands.append(expr)
      ctx.queue.append(operands)

    def reduce_to_accessor(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      accessor_or_id = ctx.stack.pop()
      if isinstance(accessor_or_id, Identifier):
        ctx.queue.append(Accessor([accessor_or_id, id]))
      else:
        accessor_or_id.accessors.append(id)
        ctx.queue.append(accessor_or_id)
#+end_src
*** lex adapter
#+begin_src python :noweb-ref guard-adapter
  class GuardLexerAdapter:

    def __init__(self, syntaxer: GuardSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Literal):
        self._syntaxer.literal(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in parameter lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src
** action syntaxer
*** framework
#+begin_src python :noweb-ref action
  <<action-context>>


  <<action-delegate>>


  class ActionSyntaxer:

    def __init__(self):
      self._fsm = ActionStateMachine(_ActionActionDelegate(), None, None)
      self._ctx = _ActionContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._fsm.identifier(self._ctx, id)
      self._consume_queue()

    def literal(self, l):
      self._consume_queue()
      self._fsm.literal(self._ctx, l)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._fsm.delimiter(self._ctx, d)
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._fsm.eof(self._ctx, 0)
      self._consume_queue()

    def result(self):
      return self._ctx.action

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        if isinstance(n, Assignment):
          self._fsm.assignment(self._ctx, n)
        elif isinstance(n, Call):
          self._fsm.call(self._ctx, n)
        elif isinstance(n, Fun):
          self._fsm.fun(self._ctx, n)
        elif isinstance(n, Identifier):
          self._fsm.identifier(self._ctx, n)
        elif isinstance(n, Literal):
          self._fsm.literal(self._ctx, n)
        elif isinstance(n, Delimiter):
          self._fsm.delimiter(self._ctx, n)
        elif isinstance(n, list):
          self._fsm.operands(self._ctx, n)
        elif isinstance(n, int):
          self._fsm.eof(self._ctx, n)
      while len(self._ctx.delay_queue) > 0:
        while len(self._ctx.queue) > 0:
          n = self._ctx.queue[0]
          self._ctx.queue = self._ctx.queue[1:]
          if isinstance(n, Assignment):
            self._fsm.assignment(self._ctx, n)
          elif isinstance(n, Call):
            self._fsm.call(self._ctx, n)
          elif isinstance(n, Fun):
            self._fsm.fun(self._ctx, n)
          elif isinstance(n, Identifier):
            self._fsm.identifier(self._ctx, n)
          elif isinstance(n, Literal):
            self._fsm.literal(self._ctx, n)
          elif isinstance(n, Delimiter):
            self._fsm.delimiter(self._ctx, n)
          elif isinstance(n, list):
            self._fsm.operands(self._ctx, n)
          elif isinstance(n, int):
            self._fsm.eof(self._ctx, n)
        d = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        if isinstance(d, Assignment):
          self._fsm.assignment(self._ctx, d)
        elif isinstance(d, Call):
          self._fsm.call(self._ctx, d)
        elif isinstance(d, Fun):
          self._fsm.fun(self._ctx, d)
        elif isinstance(d, Identifier):
          self._fsm.identifier(self._ctx, d)
        elif isinstance(d, Literal):
          self._fsm.literal(self._ctx, d)
        elif isinstance(d, Delimiter):
          self._fsm.delimiter(self._ctx, d)
        elif isinstance(d, list):
          self._fsm.operands(self._ctx, d)
        elif isinstance(d, int):
          self._fsm.eof(self._ctx, d)


  <<action-adapter>>
#+end_src
*** bnf
#+begin_src text
  action = assignment
         | call

  assignment = identifier : identifier = call
             | identifier = call

  call = fun ( operands )
       | fun ( )
       | fun

  fun = fun identifier
      | fun literal
      | identifier

  operands = literal
           | identifier
           | operands , literal
           | operands , identifier
#+end_src
*** fsm defination
#+begin_src json :tangle ${BUILDDIR}/action-fsm.json
  {
    "variables": [],
    "events": [
      {
        "name": "assignment",
        "parameters": [
          {
            "name": "a",
            "type": "assignment"
          }
        ]
      },
      {
        "name": "call",
        "parameters": [
          {
            "name": "c",
            "type": "call"
          }
        ]
      },
      {
        "name": "fun",
        "parameters": [
          {
            "name": "f",
            "type": "fun"
          }
        ]
      },
      {
        "name": "operands",
        "parameters": [
          {
            "name": "o",
            "type": "[identifier | literal]"
          }
        ]
      },
      {
        "name": "identifier",
        "parameters": [
          {
            "name": "i",
            "type": "identifier"
          }
        ]
      },
      {
        "name": "literal",
        "parameters": [
          {
            "name": "l",
            "type": "literal"
          }
        ]
      },
      {
        "name": "delimiter",
        "parameters": [
          {
            "name": "d",
            "type": "delimiter"
          }
        ]
      },
      {
        "name": "eof",
        "parameters": [
          {
            "name": "e",
            "type": "int"
          }
        ]
      }
    ],
    "states": [
      {
        "name": "action -> \u00b7 assignment $$\naction -> \u00b7 call $$\nassignment -> \u00b7 identifier : identifier = call\nassignment -> \u00b7 identifier = call\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\ncall -> \u00b7 fun\nfun -> \u00b7 fun identifier\nfun -> \u00b7 fun literal\nfun -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "shift(a)"
            ],
            "event": "assignment",
            "target": "action -> assignment \u00b7 $$"
          },
          {
            "actions": [
              "shift(c)"
            ],
            "event": "call",
            "target": "action -> call \u00b7 $$"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\ncall -> fun \u00b7\nfun -> fun \u00b7 identifier\nfun -> fun \u00b7 literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "assignment -> identifier \u00b7 : identifier = call\nassignment -> identifier \u00b7 = call\nfun -> identifier \u00b7"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "action -> assignment \u00b7 $$",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(e)",
              "reduce to action"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "action -> call \u00b7 $$",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(e)",
              "reduce to action"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "assignment -> identifier \u00b7 : identifier = call\nassignment -> identifier \u00b7 = call\nfun -> identifier \u00b7",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(i)"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(l)"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'",
            "target": "assignment -> identifier : \u00b7 identifier = call"
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '='",
            "target": "assignment -> identifier = \u00b7 call\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\ncall -> \u00b7 fun\nfun -> \u00b7 fun identifier\nfun -> \u00b7 fun literal\nfun -> \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "reduce 1 to fun",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "assignment -> identifier : \u00b7 identifier = call",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)"
            ],
            "event": "identifier",
            "target": "assignment -> identifier : identifier \u00b7 = call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "assignment -> identifier : identifier \u00b7 = call",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '='",
            "target": "assignment -> identifier : identifier = \u00b7 call\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\ncall -> \u00b7 fun\nfun -> \u00b7 fun identifier\nfun -> \u00b7 fun literal\nfun -> \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "assignment -> identifier : identifier = \u00b7 call\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\ncall -> \u00b7 fun\nfun -> \u00b7 fun identifier\nfun -> \u00b7 fun literal\nfun -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "shift(c)",
              "reduce 5 to assignment(c)"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\ncall -> fun \u00b7\nfun -> fun \u00b7 identifier\nfun -> fun \u00b7 literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)",
              "reduce 1 to fun"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "assignment -> identifier = \u00b7 call\ncall -> \u00b7 fun ( operands )\ncall -> \u00b7 fun ( )\ncall -> \u00b7 fun\nfun -> \u00b7 fun identifier\nfun -> \u00b7 fun literal\nfun -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "shift(c)",
              "reduce 3 to assignment(c)"
            ],
            "event": "call"
          },
          {
            "actions": [
              "shift(f)"
            ],
            "event": "fun",
            "target": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\ncall -> fun \u00b7\nfun -> fun \u00b7 identifier\nfun -> fun \u00b7 literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)",
              "reduce 1 to fun"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun \u00b7 ( operands )\ncall -> fun \u00b7 ( )\ncall -> fun \u00b7\nfun -> fun \u00b7 identifier\nfun -> fun \u00b7 literal",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)",
              "reduce 2 to fun"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(l)",
              "reduce 2 to fun"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '('",
            "target": "call -> fun ( \u00b7 operands )\ncall -> fun ( \u00b7 )\noperands -> \u00b7 operands , literal\noperands -> \u00b7 operands , identifier\noperands -> \u00b7 literal\noperands -> \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "reduce 1 to call",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun ( \u00b7 operands )\ncall -> fun ( \u00b7 )\noperands -> \u00b7 operands , literal\noperands -> \u00b7 operands , identifier\noperands -> \u00b7 literal\noperands -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "shift(o)"
            ],
            "event": "operands",
            "target": "call -> fun ( operands \u00b7 )\noperands -> operands \u00b7 , literal\noperands -> operands \u00b7 , identifier"
          },
          {
            "actions": [
              "shift(i)",
              "reduce 1 to operands"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(l)",
              "reduce 1 to operands"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "shift(d)",
              "reduce 3 to call"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','",
            "target": "operands -> operands , \u00b7 literal\noperands -> operands , \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "call -> fun ( operands \u00b7 )\noperands -> operands \u00b7 , literal\noperands -> operands \u00b7 , identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "shift(d)",
              "reduce 4 to call"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','",
            "target": "operands -> operands , \u00b7 literal\noperands -> operands , \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "operands -> operands , \u00b7 literal\noperands -> operands , \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "assignment"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "call"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "fun"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "operands"
          },
          {
            "actions": [
              "shift(i)",
              "reduce 2 to operands"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(l)",
              "reduce 2 to operands"
            ],
            "event": "literal"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '('"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ')'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '='"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      }
    ]
  }
#+end_src

*** context
#+begin_src python :noweb-ref action-context
  class _ActionContext:
    action: Union[Assignment, Call]

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.stack = []
      self.action = None
#+end_src
*** delegate
#+begin_src python :noweb-ref action-delegate
  class _ActionActionDelegate(ActionActionDelegate):

    def shift(self, ctx, l):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.stack.append(l)

    def syntax_error(self, ctx):
      print("syntax error in action syntaxer")

    def quit(self, ctx):
      exit(1)

    def reduce_to_action(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.action = ctx.stack.pop()

    def reduce_1_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.queue.append(Fun(id))

    def enqueue(self, ctx, e):
      ctx.delay_queue.append(e)

    def reduce_5_to_assignment(self, ctx, c):
      ctx.fsm.state = ctx.state_stack.pop()
      call = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.queue.append(Assignment(id, type, call))

    def reduce_3_to_assignment(self, ctx, c):
      ctx.fsm.state = ctx.state_stack.pop()
      call = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.queue.append(Assignment(id, None, call))

    def reduce_2_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      fun.names.append(id)
      ctx.queue.append(fun)

    def reduce_1_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_1_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      operand = ctx.stack.pop()
      ctx.queue.append([operand])

    def reduce_3_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_4_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.stack.pop()
      ctx.queue.append(Call(fun, operands))

    def reduce_2_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      operand1 = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operand2 = ctx.stack.pop()
      ctx.queue.append(operand2 + operand1)
#+end_src
*** lex adapter
#+begin_src python :noweb-ref action-adapter
  class ActionLexerAdapter:

    def __init__(self, syntaxer: ActionSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Literal):
        self._syntaxer.literal(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in parameter lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src
** utility
*** framework
#+begin_src python :noweb-ref utility
  <<find-call-in-expression>>
#+end_src
*** find call in expression
#+begin_src python :noweb-ref find-call-in-expression
  def find_call_in_expression(exp: Expression):
    if isinstance(exp, Call):
      yield exp
    elif isinstance(exp, BoolExpression):
      for x in find_call_in_expression(exp.expr):
        yield x
    elif isinstance(exp, BinaryBoolExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, UnaryBoolExpression):
      for x in find_call_in_expression(exp.expr):
        yield x
    elif isinstance(exp, CompareExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
#+end_src
