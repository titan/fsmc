#+STARTUP: indent

* Analyzer

** framework
#+begin_src python :tangle ${BUILDDIR}/analyzer.py
  from typing import List, NewType, Union
  from abc import ABC, abstractmethod
  from header_fsm import ActionDelegate as HeaderActionDelegate, GuardDelegate as HeaderGuardDelegate, VariableDelegate as HeaderVariableDelegate, StateMachine as HeaderStateMachine
  from action_fsm import ActionDelegate as ActionActionDelegate, GuardDelegate as ActionGuardDelegate, VariableDelegate as ActionVariableDelegate, StateMachine as ActionStateMachine
  from guard_fsm import ActionDelegate as GuardActionDelegate, GuardDelegate as GuardGuardDelegate, VariableDelegate as GuardVariableDelegate, StateMachine as GuardStateMachine
  from model import Parameter, EventName, Event, Transition
  from semantic import Expression, Assignment, Identifier, Literal, Delimiter, Call, BoolExpression, UnaryBoolExpression, BinaryBoolExpression, CompareExpression, Accessor, Fun, Var, Type, UnionType, ListType, MapType, Action


  <<utility>>


  <<header>>


  <<action>>


  <<guard>>
#+end_src

** header syntaxer
*** framework
#+begin_src python :noweb-ref header
  <<header-context>>


  <<header-delegate>>


  class HeaderSyntaxer:

    def __init__(self):
      self._fsm = HeaderStateMachine(_HeaderActionDelegate(), None, None)
      self._ctx = _HeaderContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._ctx.input = id
      self._fsm.identifier(self._ctx)
      self._consume_queue()

    def literal(self, l):
      self._consume_queue()
      self._ctx.input = l
      self._fsm.literal(self._ctx)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._ctx.input = d
      self._fsm.literal_token(self._ctx, str(d))
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._ctx.input = '$$'
      self._fsm.dollar_dollar(self._ctx)
      self._consume_queue()

    def result(self):
      return self._ctx.target

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        self._ctx.input = n
        self._feed(n)
      while len(self._ctx.delay_queue) > 0:
        while len(self._ctx.queue) > 0:
          n = self._ctx.queue[0]
          self._ctx.queue = self._ctx.queue[1:]
          self._ctx.input = n
          self._feed(n)
        d = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        self._ctx.input = d
        self._feed(d)

    def _feed(self, n):
      self._ctx.input = n
      if isinstance(n, Transition):
        self._fsm.transition(self._ctx)
      elif isinstance(n, Event):
        self._fsm.event(self._ctx)
      elif isinstance(n, EventName):
        self._fsm.eventname(self._ctx)
      elif isinstance(n, Var):
        self._fsm.var(self._ctx)
      elif isinstance(n, Type):
        self._fsm.type(self._ctx)
      elif isinstance(n, UnionType):
        self._fsm.union_type(self._ctx)
      elif isinstance(n, ListType):
        self._fsm.list_type(self._ctx)
      elif isinstance(n, MapType):
        self._fsm.map_type(self._ctx)
      elif isinstance(n, Parameter):
        self._fsm.parameter(self._ctx)
      elif isinstance(n, BoolExpression):
        self._fsm.bool_expression(self._ctx)
      elif isinstance(n, CompareExpression):
        self._fsm.compare_expression(self._ctx)
      elif isinstance(n, Expression):
        self._fsm.expression(self._ctx)
      elif isinstance(n, Call):
        self._fsm.call(self._ctx)
      elif isinstance(n, Fun):
        self._fsm.fun(self._ctx)
      elif isinstance(n, Accessor):
        self._fsm.accessor(self._ctx)
      elif isinstance(n, list):
        if isinstance(n[0], Parameter):
          self._fsm.parameters(self._ctx)
        else:
          self._fsm.operands(self._ctx)
      elif isinstance(n, str) and n == '$$':
        self._fsm.dollar_dollar(self._ctx)
      elif isinstance(n, Identifier):
        self._fsm.identifier(self._ctx)
      elif isinstance(n, Delimiter):
        self._fsm.literal_token(self._ctx, str(n))
      elif isinstance(n, Literal):
        self._fsm.literal(self._ctx)


  <<header-adapter>>
#+end_src
*** bnf
#+begin_src text :tangle ${BUILDDIR}/header_fsm.bnf
  target = transition $$

  transition = event
             | event '[' bool-expression ']'

  event = eventname
        | eventname '(' parameters ')'

  eventname = eventname identifier
            | identifier

  parameters = parameters ',' parameter
             | parameter

  parameter = var ':' type

  var = identifier

  type = identifier
       | list-type
       | map-type
       | union-type

  union-type = union-type '|' identifier
             | union-type '|' list-type
             | union-type '|' map-type
             | identifier '|' identifier
             | identifier '|' list-type
             | identifier '|' map-type
             | list-type '|' identifier
             | list-type '|' list-type
             | list-type '|' map-type
             | map-type '|' identifier
             | map-type '|' list-type
             | map-type '|' map-type

  list-type = '[' type ']'

  map-type = '{' type ':' type '}'

  bool-expression = bool-expression "and" bool-expression
                  | bool-expression "or" bool-expression
                  | "not" bool-expression
                  | compare-expression
                  | '(' bool-expression ')'
                  | expression

  compare-expression = expression "==" expression
                     | expression "!=" expression
                     | expression ">"  expression
                     | expression ">=" expression
                     | expression "<"  expression
                     | expression "<=" expression

  expression = call
             | accessor
             | literal
             | identifier

  call = fun '(' operands ')'
       | fun '(' ')'

  fun = fun identifier
      | fun literal
      | identifier

  operands = expression
           | operands ',' expression

  accessor = accessor '.' identifier
           | identifier '.' identifier
#+end_src
*** context
#+begin_src python :noweb-ref header-context
  class _HeaderContext:
    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.value_stack = []
      self.target = None
      self.input = None
#+end_src
*** delegate
#+begin_src python :noweb-ref header-delegate
  class _HeaderActionDelegate(HeaderActionDelegate):

    def shift(self, ctx):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.value_stack.append(ctx.input)

    def syntax_error(self, ctx):
      print("syntax error in header syntaxer")
      print("current state: %d" % ctx.fsm.state)
      print("stack: %s" % ctx.value_stack)
      print("state stack: %s" % ctx.state_stack)
      print("input: %s" % ctx.input)
      exit(1)

    def reduce_1_to_eventname(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      name = ctx.value_stack.pop()
      eventname = EventName()
      eventname.data.append(name)
      ctx.queue.append(eventname)

    def reduce_2_to_target(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      transition = ctx.value_stack.pop()
      ctx.target = transition

    def enqueue(self, ctx):
      ctx.delay_queue.append(ctx.input)

    def reduce_1_to_transition(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      event = ctx.value_stack.pop()
      transition = Transition()
      transition.event = event
      ctx.queue.append(transition)

    def reduce_1_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append(BoolExpression(expr))

    def reduce_1_to_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append(Expression(expr))

    def reduce_4_to_transition(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      guard = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      event = ctx.value_stack.pop()
      transition = Transition()
      transition.event = event
      transition.guard = guard
      ctx.queue.append(transition)

    def reduce_3_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.value_stack.pop()
      ctx.queue.append(BinaryBoolExpression(expr1, op, expr2))

    def reduce_2_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.queue.append(UnaryBoolExpression(op, expr))

    def reduce_3_to_compare_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.value_stack.pop()
      ctx.queue.append(CompareExpression(expr1, op, expr2))

    def reduce_2_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      fun.names.append(id)
      ctx.queue.append(fun)

    def reduce_3_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_1_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append([expr.entity])

    def reduce_4_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, operands))

    def reduce_3_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      operands.append(expr.entity)
      ctx.queue.append(operands)

    def reduce_1_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.queue.append(Fun(id))

    def reduce_3_to_accessor(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      accessor_or_id = ctx.value_stack.pop()
      if isinstance(accessor_or_id, Identifier):
        ctx.queue.append(Accessor([accessor_or_id, id]))
      else:
        accessor_or_id.accessors.append(id)
        ctx.queue.append(accessor_or_id)

    def reduce_1_to_event(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      eventname = ctx.value_stack.pop()
      event = Event()
      event.name = str(eventname)
      ctx.queue.append(event)

    def reduce_2_to_eventname(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      name = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      eventname = ctx.value_stack.pop()
      eventname.data.append(name)
      ctx.queue.append(eventname)

    def reduce_1_to_var(self, ctx):
      var = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.queue.append(Var(var))

    def reduce_1_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.value_stack.pop()
      parameters = [ parameter ]
      ctx.queue.append(parameters)

    def reduce_4_to_event(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      parameters = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      eventname = ctx.value_stack.pop()
      event = Event()
      event.name = str(eventname)
      event.parameters = parameters
      ctx.queue.append(event)

    def reduce_3_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      parameters = ctx.value_stack.pop()
      parameters.append(parameter)
      ctx.queue.append(parameters)

    def reduce_3_to_parameter(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      var = ctx.value_stack.pop()
      parameter = Parameter(var, type)
      ctx.queue.append(parameter)

    def reduce_1_to_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.value_stack.pop()
      if isinstance(type, Identifier):
        t = Type(0, type)
      else:
        t = Type(type.kind, type)
      ctx.queue.append(t)

    def reduce_3_to_union_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      a = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      b = ctx.value_stack.pop()
      if isinstance(b, UnionType):
        b.types.append(a)
        ctx.queue.append(b)
      else:
        u = UnionType()
        u.types.append(b)
        u.types.append(a)
        ctx.queue.append(u)

    def reduce_3_to_list_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.queue.append(ListType(type))

    def reduce_5_to_map_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      valtype = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      keytype = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.queue.append(MapType(keytype, valtype))
#+end_src
*** lex adapter
#+begin_src python :noweb-ref header-adapter
  class HeaderLexerAdapter:

    def __init__(self, syntaxer: HeaderSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Literal):
        self._syntaxer.literal(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in header lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src

** guard syntaxer
*** framework
#+begin_src python :noweb-ref guard
  <<guard-context>>


  <<guard-delegate>>


  class GuardSyntaxer:

    def __init__(self):
      self._fsm = GuardStateMachine(_GuardActionDelegate(), None, None)
      self._ctx = _GuardContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._ctx.input = id
      self._fsm.identifier(self._ctx)
      self._consume_queue()

    def literal(self, l):
      self._consume_queue()
      self._ctx.input = l
      self._fsm.literal(self._ctx)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._ctx.input = d
      self._fsm.literal_token(self._ctx, str(d))
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._ctx.input = '$$'
      self._fsm.dollar_dollar(self._ctx)
      self._consume_queue()

    def result(self):
      return self._ctx.guard

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        self._ctx.input = n
        self._feed(n)
      while len(self._ctx.delay_queue) > 0:
        while len(self._ctx.queue) > 0:
          n = self._ctx.queue[0]
          self._ctx.queue = self._ctx.queue[1:]
          self._ctx.input = n
          self._feed(n)
        d = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        self._ctx.input = d
        self._feed(d)

    def _feed(self, n):
      self._ctx.input = n
      if isinstance(n, BoolExpression):
        self._fsm.bool_expression(self._ctx)
      elif isinstance(n, CompareExpression):
        self._fsm.compare_expression(self._ctx)
      elif isinstance(n, Expression):
        self._fsm.expression(self._ctx)
      elif isinstance(n, Call):
        self._fsm.call(self._ctx)
      elif isinstance(n, Fun):
        self._fsm.fun(self._ctx)
      elif isinstance(n, Accessor):
        self._fsm.accessor(self._ctx)
      elif isinstance(n, str) and n == '$$':
        self._fsm.dollar_dollar(self._ctx)
      elif isinstance(n, Identifier):
        self._fsm.identifier(self._ctx)
      elif isinstance(n, Literal):
        self._fsm.literal(self._ctx)
      elif isinstance(n, Delimiter):
        self._fsm.literal_token(self._ctx, str(n))
      elif isinstance(n, list):
        self._fsm.operands(self._ctx)

  <<guard-adapter>>
#+end_src
*** bnf
#+begin_src text :tangle ${BUILDDIR}/guard_fsm.bnf
  guard = bool-expression $$

  bool-expression = bool-expression "and" bool-expression
                  | bool-expression "or" bool-expression
                  | "not" bool-expression
                  | compare-expression
                  | '(' bool-expression ')'
                  | expression

  compare-expression = expression "==" expression
                     | expression "!=" expression
                     | expression ">"  expression
                     | expression ">=" expression
                     | expression "<"  expression
                     | expression "<=" expression

  expression = call
             | accessor
             | literal
             | identifier

  call = fun '(' operands ')'
       | fun '(' ')'

  fun = fun identifier
      | fun literal
      | identifier

  operands = expression
           | operands ',' expression

  accessor = accessor '.' identifier
           | identifier '.' identifier
#+end_src

*** context
#+begin_src python :noweb-ref guard-context
  class _GuardContext:
    guard: BoolExpression

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.value_stack = []
      self.guard = None
#+end_src
*** delegate
#+begin_src python :noweb-ref guard-delegate
  class _GuardActionDelegate(GuardActionDelegate):

    def shift(self, ctx):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.value_stack.append(ctx.input)

    def syntax_error(self, ctx):
      print("syntax error in guard syntaxer")

    def quit(self, ctx):
      exit(1)

    def enqueue(self, ctx):
      ctx.delay_queue.append(ctx.input)

    def reduce_2_to_guard(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.guard = ctx.value_stack.pop()

    def reduce_1_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append(BoolExpression(expr))

    def reduce_2_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.queue.append(UnaryBoolExpression(op, expr))

    def reduce_3_to_bool_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.value_stack.pop()
      ctx.queue.append(BinaryBoolExpression(expr1, op, expr2))

    def reduce_3_to_compare_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr2 = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      op = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      expr1 = ctx.value_stack.pop()
      ctx.queue.append(CompareExpression(expr1, op, expr2))

    def reduce_1_to_expression(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append(Expression(expr))

    def reduce_3_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_4_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, operands))

    def reduce_1_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.queue.append(Fun(id))

    def reduce_2_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      fun.names.append(id)
      ctx.queue.append(fun)

    def reduce_1_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.queue.append([expr.entity])

    def reduce_3_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      expr = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      operands.append(expr.entity)
      ctx.queue.append(operands)

    def reduce_3_to_accessor(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      accessor_or_id = ctx.value_stack.pop()
      if isinstance(accessor_or_id, Identifier):
        ctx.queue.append(Accessor([accessor_or_id, id]))
      else:
        accessor_or_id.accessors.append(id)
        ctx.queue.append(accessor_or_id)
#+end_src
*** lex adapter
#+begin_src python :noweb-ref guard-adapter
  class GuardLexerAdapter:

    def __init__(self, syntaxer: GuardSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Literal):
        self._syntaxer.literal(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in guard lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src
** action syntaxer
*** framework
#+begin_src python :noweb-ref action
  <<action-context>>


  <<action-delegate>>


  class ActionSyntaxer:

    def __init__(self):
      self._fsm = ActionStateMachine(_ActionActionDelegate(), None, None)
      self._ctx = _ActionContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._ctx.input = id
      self._fsm.identifier(self._ctx)
      self._consume_queue()

    def literal(self, l):
      self._consume_queue()
      self._ctx.input = l
      self._fsm.literal(self._ctx)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._ctx.input = d
      self._fsm.literal_token(self._ctx, str(d))
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._ctx.input = '$$'
      self._fsm.dollar_dollar(self._ctx)
      self._consume_queue()

    def result(self):
      return self._ctx.action

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        self._ctx.input = n
        self._feed(n)
      while len(self._ctx.delay_queue) > 0:
        while len(self._ctx.queue) > 0:
          n = self._ctx.queue[0]
          self._ctx.queue = self._ctx.queue[1:]
          self._ctx.input = n
          self._feed(n)
        d = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        self._ctx.input = d
        self._feed(d)

    def _feed(self, n):
      self._ctx.input = n
      if isinstance(n, Action):
        self._fsm.action(self._ctx)
      elif isinstance(n, Assignment):
        self._fsm.assignment(self._ctx)
      elif isinstance(n, Call):
        self._fsm.call(self._ctx)
      elif isinstance(n, Fun):
        self._fsm.fun(self._ctx)
      elif isinstance(n, Identifier):
        self._fsm.identifier(self._ctx)
      elif isinstance(n, Literal):
        self._fsm.literal(self._ctx)
      elif isinstance(n, Delimiter):
        self._fsm.literal_token(self._ctx, str(n))
      elif isinstance(n, list):
        self._fsm.operands(self._ctx)
      elif isinstance(n, int):
        self._fsm.eof(self._ctx)
      elif isinstance(n, str) and n == '$$':
        self._fsm.dollar_dollar(self._ctx)


  <<action-adapter>>
#+end_src
*** bnf
#+begin_src text :tangle ${BUILDDIR}/action_fsm.bnf
  target = action $$

  action = assignment
         | call

  assignment = identifier ':' identifier '=' call
             | identifier '=' call

  call = fun '(' operands ')'
       | fun '(' ')'
       | fun

  fun = fun identifier
      | fun literal
      | identifier

  operands = literal
           | identifier
           | operands ',' literal
           | operands ',' identifier
#+end_src
*** context
#+begin_src python :noweb-ref action-context
  class _ActionContext:
    action: Union[Assignment, Call]

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.value_stack = []
      self.action = None
      self.input = None
#+end_src
*** delegate
#+begin_src python :noweb-ref action-delegate
  class _ActionActionDelegate(ActionActionDelegate):

    def shift(self, ctx):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.value_stack.append(ctx.input)

    def syntax_error(self, ctx):
      print("syntax error in action syntaxer")
      print("current state: %d" % ctx.fsm.state)
      print("stack: %s" % ctx.value_stack)
      print("state stack: %s" % ctx.state_stack)
      print("input: %s" % ctx.input)

    def reduce_1_to_action(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      action = ctx.value_stack.pop()
      ctx.queue.append(Action(action))

    def reduce_2_to_target(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      action = ctx.value_stack.pop()
      ctx.action = action.value

    def enqueue(self, ctx):
      ctx.delay_queue.append(ctx.input)

    def reduce_1_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.queue.append(Fun(id))

    def reduce_5_to_assignment(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      call = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.queue.append(Assignment(id, type, call))

    def reduce_1_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_2_to_fun(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      fun.names.append(id)
      ctx.queue.append(fun)

    def reduce_1_to_operands(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      operand = ctx.value_stack.pop()
      ctx.queue.append([operand])

    def reduce_3_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, []))

    def reduce_4_to_call(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      fun = ctx.value_stack.pop()
      ctx.queue.append(Call(fun, operands))

    def reduce_3_to_operands(self, ctx):
      ctx.state_stack.pop()
      operand = ctx.value_stack.pop()
      ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      operands = ctx.value_stack.pop()
      operands.append(operand)
      ctx.queue.append(operands)

    def reduce_3_to_assignment(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      call = ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.value_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      id = ctx.value_stack.pop()
      ctx.queue.append(Assignment(id, None, call))
#+end_src
*** lex adapter
#+begin_src python :noweb-ref action-adapter
  class ActionLexerAdapter:

    def __init__(self, syntaxer: ActionSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Literal):
        self._syntaxer.literal(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in parameter lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src
** utility
*** framework
#+begin_src python :noweb-ref utility
  <<find-call-in-expression>>
#+end_src
*** find call in expression
#+begin_src python :noweb-ref find-call-in-expression
  def find_call_in_expression(exp: Expression):
    if isinstance(exp, Call):
      yield exp
    elif isinstance(exp, BinaryBoolExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, UnaryBoolExpression):
      for x in find_call_in_expression(exp.expr):
        yield x
    elif isinstance(exp, CompareExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, BoolExpression):
      for x in find_call_in_expression(exp.expr):
        yield x
    elif isinstance(exp, Expression):
      for x in find_call_in_expression(exp.entity):
        yield x
#+end_src
