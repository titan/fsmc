#+STARTUP: indent

* Analyzer

** framework
#+begin_src python :tangle ${BUILDDIR}/analyzer.py
  from typing import List, NewType, Union
  from abc import ABC, abstractmethod
  from lexer_fsm import ActionDelegate as LexerActionDelegate, GuardDelegate as LexerGuardDelegate, VariableDelegate as LexerVariableDelegate, StateMachine as LexerStateMachine
  from parameter_fsm import ActionDelegate as ParameterActionDelegate, GuardDelegate as ParameterGuardDelegate, VariableDelegate as ParameterVariableDelegate, StateMachine as ParameterStateMachine
  from model import Parameter
  from semantic import Expression, Assignment, Identifier, Delimiter, Call, AndExpression, OrExpression, NotExpression, EqualsExpression, NotEqualToExpression, LessThanExpression, LessThanOrEqualToExpression, GreaterThanExpression, GreaterThanOrEqualToExpression, Var, Type, UnionType, ListType, MapType


  <<utility>>


  <<lexer>>


  <<parameter>>
#+end_src

** lexer
*** framework
#+begin_src python :noweb-ref lexer
  <<lexer-adapter>>


  <<lexer-context>>


  <<lexer-action-delegate>>


  <<lexer-guard-delegate>>


  <<lexer-variable-delegate>>


  class Lexer:
    def __init__(self, adapter: LexerAdapter = None):
      self._fsm = LexerStateMachine(_LexerActionDelegate(), _LexerGuardDelegate(), _LexerVariableDelegate(adapter))
      self._ctx = _LexerContext()

    def feed(self, ch):
      if ch == '\r' or ch == '\n':
        self._fsm.new_line(self._ctx)
      else:
        self._fsm.input(self._ctx, ch)

    def eof(self):
      self._fsm.eof(self._ctx)
#+end_src
*** fsm defination
#+begin_src json :tangle ${BUILDDIR}/lexer-fsm.json
  {
    "variables": [
      {
        "name": "output",
        "type": "token"
      }
    ],
    "events": [
      {
        "name": "input",
        "parameters": [
          {
            "name": "ch",
            "type": "char"
          }
        ]
      },
      {
        "name": "new line"
      },
      {
        "name": "eof"
      }
    ],
    "states": [
      {
        "name": "init",
        "transactions": [
          {
            "actions": [
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('"
          },
          {
            "actions": [
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'"
          },
          {
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'"
          },
          {
            "actions": [
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'"
          },
          {
            "actions": [
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          }
        ]
      },
      {
        "name": "token",
        "transactions": [
          {
            "actions": [
              "output = token",
              "output = open parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "output = close parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer",
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer",
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "output = token",
              "output = dot",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "output = token",
              "clear buffer"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "number",
        "transactions": [
          {
            "actions": [
              "output = number",
              "output = open parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "output = close parenthesis",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "output = colon"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "output = comma"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "="
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "<"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": ">"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "output = number",
              "clear buffer",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "output = number",
              "clear buffer"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "char ready",
        "transactions": [
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "char"
          },
          {
            "actions": [
              "output = empty char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped char ready"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "char"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "char",
        "transactions": [
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "output = char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped char ready",
        "transactions": [
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "escaped char"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped char"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "escaped char"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped char",
        "transactions": [
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "output = escaped char",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped char error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "string",
        "transactions": [
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '('"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ')'"
          },
          {
            "actions": [
              "output = string",
              "clear buffer"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "escaped string"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ':'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == ','"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '='"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '!'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '<'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '>'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '.'"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isspace(ch)"
          },
          {
            "actions": [
              "string error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "string error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "escaped string",
        "transactions": [
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "string"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "string"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "string"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "escaped string error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "=",
        "transactions": [
          {
            "actions": [
              "output = assignment",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "=="
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "event": "input",
            "guard": "ch == '<'",
            "target": "<="
          },
          {
            "event": "input",
            "guard": "ch == '>'",
            "target": ">="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = assignment",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = assignment",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = assignment",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = assignment"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "==",
        "transactions": [
          {
            "actions": [
              "output = equals",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = equals",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = equals",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = equals",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = equals"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "!",
        "transactions": [
          {
            "actions": [
              "output = not",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "!="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = not",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = not",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "!=",
        "transactions": [
          {
            "actions": [
              "output = not equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "!"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = not equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = not equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = not equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "<",
        "transactions": [
          {
            "actions": [
              "output = less than",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": "<="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = less than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "<=",
        "transactions": [
          {
            "actions": [
              "output = less than or equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = less than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = less than or equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": ">",
        "transactions": [
          {
            "actions": [
              "output = greater than",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "event": "input",
            "guard": "ch == '='",
            "target": ">="
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = greater than",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": ">=",
        "transactions": [
          {
            "actions": [
              "output = greater than or equal to",
              "output = open parenthesis"
            ],
            "event": "input",
            "guard": "ch == '('",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "output = close parenthesis"
            ],
            "event": "input",
            "guard": "ch == ')'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\"'",
            "target": "string"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "ch == '\\''",
            "target": "char ready"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '\\\\'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ':'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == ','",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '='",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '!'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '<'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '>'",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "input",
            "guard": "ch == '.'",
            "target": "init"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isescaped(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isdigit(ch)",
            "target": "number"
          },
          {
            "actions": [
              "output = greater than or equal to",
              "add-to-buffer(ch)"
            ],
            "event": "input",
            "guard": "isalpha(ch)",
            "target": "token"
          },
          {
            "actions": [
              "output = greater than or equal to"
            ],
            "event": "input",
            "guard": "isspace(ch)",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "new line",
            "target": "init"
          },
          {
            "actions": [
              "error",
              "quit"
            ],
            "event": "eof",
            "target": "init"
          }
        ]
      }
    ]
  }
#+end_src
#+begin_src python :tangle ${BUILDDIR}/lexer_fsm.py
  from abc import ABC, abstractmethod

  class State:
    INIT = 0
    TOKEN = 1
    NUMBER = 2
    CHAR_READY = 3
    CHAR = 4
    ESCAPED_CHAR_READY = 5
    ESCAPED_CHAR = 6
    STRING = 7
    ESCAPED_STRING = 8
    EQUALS = 9
    DOUBLE_EQUALS = 10
    EXCLAM = 11
    NOT_EQUAL_TO = 12
    LESS_THAN = 13
    LESS_THAN_OR_EQUAL_TO = 14
    GREATER_THAN = 15
    GREATER_THAN_OR_EQUAL_TO = 16


  class ActionDelegate(ABC):

    @abstractmethod
    def error(self, ctx):
      return NotImplemented

    @abstractmethod
    def quit(self, ctx):
      return NotImplemented

    @abstractmethod
    def add_to_buffer(self, ctx, ch):
      return NotImplemented

    @abstractmethod
    def clear_buffer(self, ctx):
      return NotImplemented

    @abstractmethod
    def char_error(self, ctx):
      return NotImplemented

    @abstractmethod
    def escaped_char_error(self, ctx):
      return NotImplemented

    @abstractmethod
    def string_error(self, ctx):
      return NotImplemented

    @abstractmethod
    def escaped_string_error(self, ctx):
      return NotImplemented

    @abstractmethod
    def token(self, ctx):
      return NotImplemented

    @abstractmethod
    def number(self, ctx):
      return NotImplemented

    @abstractmethod
    def char(self, ctx):
      return NotImplemented

    @abstractmethod
    def my_not(self, ctx):
      return NotImplemented



  class GuardDelegate(ABC):

    @abstractmethod
    def isalpha(self, ch):
      return NotImplemented

    @abstractmethod
    def isescaped(self, ch):
      return NotImplemented

    @abstractmethod
    def isdigit(self, ch):
      return NotImplemented

    @abstractmethod
    def isspace(self, ch):
      return NotImplemented



  class VariableDelegate(ABC):

    @abstractmethod
    def on_output_changed(self, output):
      return NotImplemented



  _transactions_target = [[State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.EQUALS, State.EXCLAM, State.LESS_THAN, State.GREATER_THAN, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.EQUALS, State.EXCLAM, State.LESS_THAN, State.GREATER_THAN, State.INIT, State.TOKEN, State.TOKEN, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.EQUALS, State.EXCLAM, State.LESS_THAN, State.GREATER_THAN, State.NUMBER, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.CHAR, State.CHAR, State.CHAR, State.INIT, State.ESCAPED_CHAR_READY, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.CHAR, State.INIT, State.INIT], [State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.INIT, State.ESCAPED_CHAR, State.ESCAPED_CHAR, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.ESCAPED_CHAR, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT], [State.STRING, State.STRING, State.INIT, State.STRING, State.ESCAPED_STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.STRING, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.STRING, State.STRING, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.STRING, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.DOUBLE_EQUALS, State.EXCLAM, State.LESS_THAN_OR_EQUAL_TO, State.GREATER_THAN_OR_EQUAL_TO, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.INIT, State.EXCLAM, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.NOT_EQUAL_TO, State.INIT, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.INIT, State.EXCLAM, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.LESS_THAN_OR_EQUAL_TO, State.INIT, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.GREATER_THAN_OR_EQUAL_TO, State.INIT, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT], [State.INIT, State.INIT, State.STRING, State.CHAR_READY, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.INIT, State.TOKEN, State.NUMBER, State.TOKEN, State.INIT, State.INIT, State.INIT]]


  class StateMachine:
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_OPEN_PARENTHESIS_APOSTROPHE = 0
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_CLOSE_PARENTHESIS_APOSTROPHE = 1
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOUBLE_QUOTES_APOSTROPHE = 2
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_APOSTROPHE_APOSTROPHE = 3
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_BACKSLASH_APOSTROPHE = 4
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COLON_APOSTROPHE = 5
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COMMA_APOSTROPHE = 6
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EQUALS_APOSTROPHE = 7
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EXCLAM_APOSTROPHE = 8
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_LESS_THAN_APOSTROPHE = 9
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_GREATER_THAN_APOSTROPHE = 10
    INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOT_APOSTROPHE = 11
    INPUT_ISESCAPED_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS = 12
    INPUT_ISDIGIT_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS = 13
    INPUT_ISALPHA_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS = 14
    INPUT_ISSPACE_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS = 15
    NEW_LINE = 16
    EOF = 17

    def __init__(self, action_delegate = None, guard_delegate = None, variable_delegate = None):
      self.state = State.INIT
      self.action_delegate = action_delegate
      self.guard_delegate = guard_delegate
      self.variable_delegate = variable_delegate
      self._transactions_action = [[None, None, None, None, self._action_block_0, None, None, None, None, None, None, self._action_block_0, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, None, None, None], [self._action_block_1, self._action_block_2, self._action_block_3, self._action_block_3, self._action_block_0, self._action_block_4, self._action_block_5, self._action_block_3, self._action_block_3, self._action_block_3, self._action_block_3, self._action_block_6, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_3, self._action_block_7, self._action_block_7], [self._action_block_8, self._action_block_9, self._action_block_10, self._action_block_10, self._action_block_0, self._action_block_11, self._action_block_12, self._action_block_10, self._action_block_10, self._action_block_10, self._action_block_10, self.action_delegate.add_to_buffer, self._action_block_13, self.action_delegate.add_to_buffer, self._action_block_13, self._action_block_10, self._action_block_14, self._action_block_14], [self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_15, None, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_16, self._action_block_16], [self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_18, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_17, self._action_block_16, self._action_block_16], [self._action_block_19, self._action_block_19, self._action_block_19, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self.action_delegate.add_to_buffer, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_20, self._action_block_20], [self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_21, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_19, self._action_block_20, self._action_block_20], [self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_22, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_23, self._action_block_23], [self._action_block_24, self._action_block_24, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self.action_delegate.add_to_buffer, self._action_block_24, self._action_block_24, self._action_block_24, self._action_block_24, self._action_block_24, self._action_block_24, self._action_block_24, self.action_delegate.add_to_buffer, self._action_block_24, self._action_block_24, self._action_block_24, self._action_block_25, self._action_block_25], [self._action_block_26, self._action_block_27, None, None, self._action_block_0, self._action_block_0, self._action_block_0, None, None, None, None, self._action_block_0, self._action_block_28, self._action_block_28, self._action_block_28, None, self._action_block_29, self._action_block_29], [self._action_block_30, self._action_block_31, None, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_32, self._action_block_32, self._action_block_32, None, self._action_block_29, self._action_block_29], [self._action_block_33, self._action_block_34, None, None, self._action_block_0, self._action_block_0, self._action_block_0, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_35, self._action_block_35, self._action_block_35, None, self._action_block_29, self._action_block_29], [self._action_block_36, self._action_block_37, None, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_38, self._action_block_38, self._action_block_38, None, self._action_block_29, self._action_block_29], [self._action_block_39, self._action_block_40, None, None, self._action_block_0, self._action_block_0, self._action_block_0, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_41, self._action_block_41, self._action_block_41, None, self._action_block_29, self._action_block_29], [self._action_block_42, self._action_block_43, None, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_44, self._action_block_44, self._action_block_44, None, self._action_block_29, self._action_block_29], [self._action_block_45, self._action_block_46, None, None, self._action_block_0, self._action_block_0, self._action_block_0, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_47, self._action_block_47, self._action_block_47, None, self._action_block_29, self._action_block_29], [self._action_block_48, self._action_block_49, None, None, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_0, self._action_block_50, self._action_block_50, self._action_block_50, None, self._action_block_29, self._action_block_29]]

    def input(self, ctx, ch):
      if ch == '(':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_OPEN_PARENTHESIS_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_OPEN_PARENTHESIS_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_OPEN_PARENTHESIS_APOSTROPHE]
      elif ch == ')':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_CLOSE_PARENTHESIS_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_CLOSE_PARENTHESIS_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_CLOSE_PARENTHESIS_APOSTROPHE]
      elif ch == '"':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOUBLE_QUOTES_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOUBLE_QUOTES_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOUBLE_QUOTES_APOSTROPHE]
      elif ch == '\'':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_APOSTROPHE_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_APOSTROPHE_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_APOSTROPHE_APOSTROPHE]
      elif ch == '\\':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_BACKSLASH_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_BACKSLASH_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_BACKSLASH_BACKSLASH_APOSTROPHE]
      elif ch == ':':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COLON_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COLON_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COLON_APOSTROPHE]
      elif ch == ',':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COMMA_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COMMA_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_COMMA_APOSTROPHE]
      elif ch == '=':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EQUALS_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EQUALS_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EQUALS_APOSTROPHE]
      elif ch == '!':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EXCLAM_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EXCLAM_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_EXCLAM_APOSTROPHE]
      elif ch == '<':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_LESS_THAN_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_LESS_THAN_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_LESS_THAN_APOSTROPHE]
      elif ch == '>':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_GREATER_THAN_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_GREATER_THAN_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_GREATER_THAN_APOSTROPHE]
      elif ch == '.':
        if self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOT_APOSTROPHE]:
          self._transactions_action[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOT_APOSTROPHE](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_CH_DOUBLE_EQUALS_APOSTROPHE_DOT_APOSTROPHE]
      elif self.guard_delegate.isescaped(ch):
        if self._transactions_action[self.state][self.INPUT_ISESCAPED_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]:
          self._transactions_action[self.state][self.INPUT_ISESCAPED_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_ISESCAPED_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]
      elif self.guard_delegate.isdigit(ch):
        if self._transactions_action[self.state][self.INPUT_ISDIGIT_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]:
          self._transactions_action[self.state][self.INPUT_ISDIGIT_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_ISDIGIT_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]
      elif self.guard_delegate.isalpha(ch):
        if self._transactions_action[self.state][self.INPUT_ISALPHA_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]:
          self._transactions_action[self.state][self.INPUT_ISALPHA_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_ISALPHA_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]
      elif self.guard_delegate.isspace(ch):
        if self._transactions_action[self.state][self.INPUT_ISSPACE_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]:
          self._transactions_action[self.state][self.INPUT_ISSPACE_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS](ctx, ch)
        self.state = _transactions_target[self.state][self.INPUT_ISSPACE_OPEN_PARENTHESIS_CH_CLOSE_PARENTHESIS]

    def new_line(self, ctx):
      if self._transactions_action[self.state][self.NEW_LINE]:
        self._transactions_action[self.state][self.NEW_LINE](ctx)
      self.state = _transactions_target[self.state][self.NEW_LINE]

    def eof(self, ctx):
      if self._transactions_action[self.state][self.EOF]:
        self._transactions_action[self.state][self.EOF](ctx)
      self.state = _transactions_target[self.state][self.EOF]

    def _action_block_0(self, ctx, ch):
        self.action_delegate.error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_1(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_2(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_3(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_4(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)
        output = self.action_delegate.colon(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_5(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)
        output = self.action_delegate.comma(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_6(self, ctx, ch):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.dot(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_7(self, ctx):
        output = self.action_delegate.token(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_8(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_9(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_10(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_11(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)
        output = self.action_delegate.colon(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_12(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)
        output = self.action_delegate.comma(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_13(self, ctx, ch):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_14(self, ctx):
        output = self.action_delegate.number(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_15(self, ctx, ch):
        output = self.action_delegate.empty_char(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_16(self, ctx):
        self.action_delegate.char_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_17(self, ctx, ch):
        self.action_delegate.char_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_18(self, ctx, ch):
        output = self.action_delegate.char(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_19(self, ctx, ch):
        self.action_delegate.escaped_char_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_20(self, ctx):
        self.action_delegate.escaped_char_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_21(self, ctx, ch):
        output = self.action_delegate.escaped_char(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_22(self, ctx, ch):
        output = self.action_delegate.string(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.clear_buffer(ctx)

    def _action_block_23(self, ctx):
        self.action_delegate.string_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_24(self, ctx, ch):
        self.action_delegate.escaped_string_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_25(self, ctx):
        self.action_delegate.escaped_string_error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_26(self, ctx, ch):
        output = self.action_delegate.assignment(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_27(self, ctx, ch):
        output = self.action_delegate.assignment(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_28(self, ctx, ch):
        output = self.action_delegate.assignment(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_29(self, ctx):
        self.action_delegate.error(ctx)
        self.action_delegate.quit(ctx)

    def _action_block_30(self, ctx, ch):
        output = self.action_delegate.equals(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_31(self, ctx, ch):
        output = self.action_delegate.equals(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_32(self, ctx, ch):
        output = self.action_delegate.equals(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_33(self, ctx, ch):
        output = self.action_delegate.my_not(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_34(self, ctx, ch):
        output = self.action_delegate.my_not(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_35(self, ctx, ch):
        output = self.action_delegate.my_not(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_36(self, ctx, ch):
        output = self.action_delegate.not_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_37(self, ctx, ch):
        output = self.action_delegate.not_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_38(self, ctx, ch):
        output = self.action_delegate.not_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_39(self, ctx, ch):
        output = self.action_delegate.less_than(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_40(self, ctx, ch):
        output = self.action_delegate.less_than(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_41(self, ctx, ch):
        output = self.action_delegate.less_than(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_42(self, ctx, ch):
        output = self.action_delegate.less_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_43(self, ctx, ch):
        output = self.action_delegate.less_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_44(self, ctx, ch):
        output = self.action_delegate.less_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_45(self, ctx, ch):
        output = self.action_delegate.greater_than(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_46(self, ctx, ch):
        output = self.action_delegate.greater_than(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_47(self, ctx, ch):
        output = self.action_delegate.greater_than(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)

    def _action_block_48(self, ctx, ch):
        output = self.action_delegate.greater_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.open_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_49(self, ctx, ch):
        output = self.action_delegate.greater_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        output = self.action_delegate.close_parenthesis(ctx)
        self.variable_delegate.on_output_changed(output)

    def _action_block_50(self, ctx, ch):
        output = self.action_delegate.greater_than_or_equal_to(ctx)
        self.variable_delegate.on_output_changed(output)
        self.action_delegate.add_to_buffer(ctx, ch)
#+end_src
*** context
#+begin_src python :noweb-ref lexer-context
  class _LexerContext:
    buffer: List[str]

    def __init__(self):
      self.buffer = []
#+end_src
*** delegates
**** action delegate
#+begin_src python :noweb-ref lexer-action-delegate
  class _LexerActionDelegate(LexerActionDelegate):

    def error(self, ctx):
      print('Unknow error')

    def quit(self, ctx):
      exit(1)

    def add_to_buffer(self, ctx, ch):
      ctx.buffer.append(ch)

    def clear_buffer(self, ctx):
      ctx.buffer.clear()

    def char_error(self, ctx):
      print('Char error')

    def escaped_char_error(self, ctx):
      print('Escaped char error')

    def string_error(self, ctx):
      print('String error')

    def escaped_string_error(self, ctx):
      print('Escaped string error')

    def token(self, ctx):
      tkn = ''.join(ctx.buffer)
      if tkn == 'true':
        return Literal(tkn, 'bool')
      elif tkn == 'false':
        return Literal(tkn, 'bool')
      else:
        return Identifier(tkn)

    def number(self, ctx):
      num = ''.join(ctx.buffer)
      return Literal(num, 'number')

    def char(self, ctx):
      ch = ''.join(ctx.buffer)
      return Literal(ch, 'char')

    def empty_char(self, ctx):
      return Literal('', 'char')

    def escaped_char(self, ctx):
      ch = ''.join(ctx.buffer)
      return Literal(ch, 'char')

    def open_parenthesis(self, ctx):
      return Delimiter('(')

    def close_parenthesis(self, ctx):
      return Delimiter(')')

    def my_not(self, ctx):
      return Delimiter('!')

    def dot(self, ctx):
      return Delimiter('dot')

    def colon(self, ctx):
      return Delimiter(':')

    def assignment(self, ctx):
      return Delimiter('=')

    def equals(self, ctx):
      return Delimiter('==')

    def not_equal_to(self, ctx):
      return Delimiter('!=')

    def less_than(self, ctx):
      return Delimiter('<')

    def less_than_or_equal_to(self, ctx):
      return Delimiter('<=')

    def greater_than(self, ctx):
      return Delimiter('>')

    def greater_than_or_equal_to(self, ctx):
      return Delimiter('>=')

#+end_src
**** guard delegate
#+begin_src python :noweb-ref lexer-guard-delegate
  class _LexerGuardDelegate(LexerGuardDelegate):

    def isalpha(self, ch):
      return ch.isalpha()

    def isescaped(self, ch):
      escaped = ['a', 'b', 't', 'n', 'v', 'f', 'r']
      return ch in escaped

    def isdigit(self, ch):
      return ch.isdigit()

    def isspace(self, ch):
      return ch.isspace()
#+end_src
**** variable delegate
#+begin_src python :noweb-ref lexer-variable-delegate
  class _LexerVariableDelegate(LexerVariableDelegate):

    def __init__(self, listener: LexerAdapter):
      self._listener = listener

    def on_output_changed(self, output):
      self._listener.on_call(output)
#+end_src
**** adapter
#+begin_src python :noweb-ref lexer-adapter
  class LexerAdapter(ABC):

    @abstractmethod
    def on_call(self, token: Union[Expression, Assignment]):
      return NotImplemented
#+end_src

** parameter syntaxer
*** framework
#+begin_src python :noweb-ref parameter
  <<parameter-context>>


  <<parameter-delegate>>


  class ParameterSyntaxer:

    def __init__(self):
      self._fsm = ParameterStateMachine(_ParameterActionDelegate(), None, None)
      self._ctx = _ParameterContext(self._fsm)

    def identifier(self, id):
      self._consume_queue()
      self._fsm.identifier(self._ctx, id)
      self._consume_queue()

    def delimiter(self, d):
      self._consume_queue()
      self._fsm.delimiter(self._ctx, d)
      self._consume_queue()

    def eof(self):
      self._consume_queue()
      self._fsm.eof(self._ctx, 0)
      self._consume_queue()

    def result(self):
      return self._ctx.parameters

    def _consume_queue(self):
      while len(self._ctx.queue) > 0:
        n = self._ctx.queue[0]
        self._ctx.queue = self._ctx.queue[1:]
        if isinstance(n, Var):
          self._fsm.var(self._ctx, n)
        elif isinstance(n, Type):
          self._fsm.type(self._ctx, n)
        elif isinstance(n, UnionType):
          self._fsm.union_type(self._ctx, n)
        elif isinstance(n, ListType):
          self._fsm.list_type(self._ctx, n)
        elif isinstance(n, MapType):
          self._fsm.map_type(self._ctx, n)
        elif isinstance(n, Parameter):
          self._fsm.parameter(self._ctx, n)
        elif isinstance(n, list):
          self._fsm.parameters(self._ctx, n)
        elif isinstance(n, int):
          self._fsm.eof(self._ctx, n)
      while len(self._ctx.delay_queue) > 0:
        n = self._ctx.delay_queue[0]
        self._ctx.delay_queue = self._ctx.delay_queue[1:]
        if isinstance(n, Var):
          self._fsm.var(self._ctx, n)
        elif isinstance(n, Type):
          self._fsm.type(self._ctx, n)
        elif isinstance(n, UnionType):
          self._fsm.union_type(self._ctx, n)
        elif isinstance(n, ListType):
          self._fsm.list_type(self._ctx, n)
        elif isinstance(n, MapType):
          self._fsm.map_type(self._ctx, n)
        elif isinstance(n, Parameter):
          self._fsm.parameter(self._ctx, n)
        elif isinstance(n, list):
          self._fsm.parameters(self._ctx, n)
        elif isinstance(n, int):
          self._fsm.eof(self._ctx, n)


  <<parameter-adapter>>
#+end_src
*** bnf
#+begin_src text
  target = parameters $$

  parameters = parameters , parameter
             | parameter

  parameter = var : type

  var = identifier

  type = common-type
       | union-type

  common-type = identifier
              | container-type

  container-type = list-type
                 | map-type

  union-type = common-type "|" common-type
             | union-type "|" common-type

  list-type = [ type ]

  map-type = { type : type }
#+end_src
*** fsm defination
#+begin_src json :tangle ${BUILDDIR}/parameter-fsm.json
  {
    "variables": [],
    "events": [
      {
        "name": "identifier",
        "parameters": [
          {
            "name": "id",
            "type": "identifier"
          }
        ]
      },
      {
        "name": "delimiter",
        "parameters": [
          {
            "name": "d",
            "type": "delimiter"
          }
        ]
      },
      {
        "name": "parameters",
        "parameters": [
          {
            "name": "ps",
            "type": "parameters"
          }
        ]
      },
      {
        "name": "parameter",
        "parameters": [
          {
            "name": "p",
            "type": "parameter"
          }
        ]
      },
      {
        "name": "var",
        "parameters": [
          {
            "name": "v",
            "type": "var"
          }
        ]
      },
      {
        "name": "type",
        "parameters": [
          {
            "name": "t",
            "type": "type"
          }
        ]
      },
      {
        "name": "union_type",
        "parameters": [
          {
            "name": "ut",
            "type": "uniontype"
          }
        ]
      },
      {
        "name": "list_type",
        "parameters": [
          {
            "name": "lt",
            "type": "listtype"
          }
        ]
      },
      {
        "name": "map_type",
        "parameters": [
          {
            "name": "mt",
            "type": "maptype"
          }
        ]
      },
      {
        "name": "eof",
        "parameters": [
          {
            "name": "e",
            "type": "int"
          }
        ]
      }
    ],
    "states": [
      {
        "name": "target -> \u00b7 parameters $$\nparameters -> \u00b7 parameters , parameter\nparameters -> \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to var"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "shift(ps)"
            ],
            "event": "parameters",
            "target": "target -> parameters \u00b7 $$\nparameters -> parameters \u00b7 , parameter"
          },
          {
            "actions": [
              "shift(p)",
              "reduce 1 to parameters"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "shift(v)"
            ],
            "event": "var",
            "target": "parameter -> var \u00b7 : type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "target -> parameters \u00b7 $$\nparameters -> parameters \u00b7 , parameter",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','",
            "target": "parameters -> parameters , \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "shift(e)",
              "reduce to target"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameters -> parameters , \u00b7 parameter\nparameter -> \u00b7 var : type\nvar -> \u00b7 identifier",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to var"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "shift(p)",
              "reduce 2 to parameters"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "shift(v)"
            ],
            "event": "var",
            "target": "parameter -> var \u00b7 : type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var \u00b7 : type",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'",
            "target": "parameter -> var : \u00b7 type\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var : \u00b7 type\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "parameter -> var : type \u00b7\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "parameter -> var : type \u00b7\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "reduce to parameter",
              "enqueue(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "reduce to parameter",
              "enqueue(e)"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to union_type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to union_type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to union_type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "list_type -> [ type \u00b7 ]\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "list_type -> [ type \u00b7 ]\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "shift(d)",
              "reduce to list_type"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "map_type -> { type \u00b7 : type }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type \u00b7 : type }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'",
            "target": "map_type -> { type : \u00b7 type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type : \u00b7 type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }",
        "transactions": [
          {
            "actions": [
              "shift(id)",
              "reduce to type"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '['",
            "target": "list_type -> [ \u00b7 type ]\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'",
            "target": "map_type -> { \u00b7 type : type }\ntype -> \u00b7 union_type\ntype -> \u00b7 list_type\ntype -> \u00b7 map_type\ntype -> \u00b7 identifier\nunion_type -> \u00b7 type | list_type\nunion_type -> \u00b7 type | map_type\nunion_type -> \u00b7 type | identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "shift(t)"
            ],
            "event": "type",
            "target": "map_type -> { type : type \u00b7 }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier"
          },
          {
            "actions": [
              "shift(ut)",
              "reduce to type"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "shift(lt)",
              "reduce to type"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "shift(mt)",
              "reduce to type"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      },
      {
        "name": "map_type -> { type : type \u00b7 }\nunion_type -> type \u00b7 | list_type\nunion_type -> type \u00b7 | map_type\nunion_type -> type \u00b7 | identifier",
        "transactions": [
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "identifier"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ','"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ':'"
          },
          {
            "actions": [
              "shift(d)"
            ],
            "event": "delimiter",
            "guard": "d.name == '|'",
            "target": "union_type -> type | \u00b7 list_type\nunion_type -> type | \u00b7 map_type\nunion_type -> type | \u00b7 identifier\nlist_type -> \u00b7 [ type ]\nmap_type -> \u00b7 { type : type }"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '['"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == ']'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "delimiter",
            "guard": "d.name == '{'"
          },
          {
            "actions": [
              "shift(d)",
              "reduce to map_type"
            ],
            "event": "delimiter",
            "guard": "d.name == '}'"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameters"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "parameter"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "var"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "union_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "list_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "map_type"
          },
          {
            "actions": [
              "syntax error",
              "quit"
            ],
            "event": "eof"
          }
        ]
      }
    ]
  }
#+end_src
*** context
#+begin_src python :noweb-ref parameter-context
  class _ParameterContext:
    parameters: List[Parameter]

    def __init__(self, fsm = None):
      self.fsm = fsm
      self.queue = []
      self.delay_queue = []
      self.state_stack = []
      self.stack = []
      self.parameters = []
#+end_src
*** delegate
#+begin_src python :noweb-ref parameter-delegate
  class _ParameterActionDelegate(ParameterActionDelegate):

    def shift(self, ctx, d):
      ctx.state_stack.append(ctx.fsm.state)
      ctx.stack.append(d)

    def reduce_to_var(self, ctx):
      var = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.queue.append(Var(var))

    def syntax_error(self, ctx):
      print("syntax error in parameter syntaxer")

    def quit(self, ctx):
      exit(1)

    def reduce_1_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.stack.pop()
      parameters = [ parameter ]
      ctx.queue.append(parameters)

    def reduce_2_to_parameters(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      parameter = ctx.stack.pop()
      parameters = ctx.stack.pop()
      parameters.append(parameter)
      ctx.queue.append(parameters)

    def reduce_to_target(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      parameters = ctx.stack.pop()
      if isinstance(parameters, list):
        ctx.parameters = parameters
      else:
        ctx.parameters.append(parameters)

    def reduce_to_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      if isinstance(type, Identifier):
        t = Type(0, type)
      else:
        t = Type(type.kind, type)
      ctx.queue.append(t)

    def reduce_to_parameter(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      var = ctx.stack.pop()
      parameter = Parameter(var, type)
      ctx.queue.append(parameter)

    def enqueue(self, ctx, e):
      ctx.delay_queue.append(e)

    def reduce_to_union_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      a = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      b = ctx.stack.pop()
      if isinstance(b, UnionType):
        b.types.append(a)
        ctx.queue.append(b)
      else:
        u = UnionType()
        u.types.append(b)
        u.types.append(a)
        ctx.queue.append(u)

    def reduce_to_list_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      type = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.queue.append(ListType(type))

    def reduce_to_map_type(self, ctx):
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      valtype = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      keytype = ctx.stack.pop()
      ctx.fsm.state = ctx.state_stack.pop()
      ctx.stack.pop()
      ctx.queue.append(MapType(keytype, valtype))
#+end_src
*** lex adapter
#+begin_src python :noweb-ref parameter-adapter
  class ParameterLexerAdapter:

    def __init__(self, syntaxer: ParameterSyntaxer):
      self._syntaxer = syntaxer

    def on_call(self, token):
      if isinstance(token, Identifier):
        self._syntaxer.identifier(token)
      elif isinstance(token, Delimiter):
        self._syntaxer.delimiter(token)
      else:
        print('Unknown token in parameter lexer adapter: %s' % (repr(token)))
        exit(1)
#+end_src

** guard syntaxer
#+begin_src text
  guard = bool-expression

  bool-expression = bool-expression bool-op expression
                  | negative-expression
                  | compare-expression
                  | expression

  negative-expression = not bool-expression

  compare-expression = expression cmp expression

  expression = call
             | literal
             | identifier

  call = identifier ( operands )

  operands = empty
           | expression
           | operands , expression

  bool-op = and
          | or

  cmp = ==
      | !=
      | >
      | >=
      | <
      | <=
#+end_src
** action syntaxer
#+begin_src text
  action = assignment
         | call

  assignment = identifier : identifier = call
             | identifier = call

  call = fun ( operands )
       | fun ( )
       | fun

  fun = fun identifier
      | identifier

  operands = literal
           | identifier
           | operands , literal
           | operands , identifier
#+end_src
** utility
*** framework
#+begin_src python :noweb-ref utility
  <<find-call-in-expression>>
#+end_src
*** find call in expression
#+begin_src python :noweb-ref find-call-in-expression
  def find_call_in_expression(exp: Expression):
    if isinstance(exp, Call):
      yield exp
    elif isinstance(exp, AndExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, OrExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, NotExpression):
      for x in find_call_in_expression(exp.exp):
        yield x
    elif isinstance(exp, EqualsExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, NotEqualToExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, GreaterThanExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, GreaterThanOrEqualToExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, LessThanExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
    elif isinstance(exp, LessThanOrEqualToExpression):
      for x in find_call_in_expression(exp.left):
        yield x
      for y in find_call_in_expression(exp.right):
        yield y
#+end_src
