#+STARTUP: indent
* JSON
** framework
#+begin_src python :tangle ${BUILDDIR}/jsonio.py
  from typing import List, Mapping
  from model import Action, Event, Parameter, State, Transaction
  import json
  import re

  <<importer>>
#+end_src
** importer
*** example
#+begin_src json :tangle ${BUILDDIR}/example.json
  {
    "events": [
      {
        "name": "input",
        "parameters": [
          {
            "name": "ch",
            "type": "char",
            "default": ""
          }
        ]
      },
      {
        "name": "eol"
      },
      {
        "name": "eof"
      }
    ],
    "states": [
      {
        "name": "init",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == '#'",
            "target": "#"
          }
        ]
      },
      {
        "name": "#",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == '#'",
            "target": "# #"
          },
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "target": "# space"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# #",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == '#'",
            "target": "# # #"
          },
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "target": "# # space"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # #",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == '#'",
            "target": "# # # #"
          },
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "target": "# # # space"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # # #",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "target": "init"
          },
          {
            "event": "input",
            "target": "init"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# space",
        "transactions": [
          {
            "event": "input",
            "guard": "ch != '#' and ch != ' '",
            "target": "# space title"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # space",
        "transactions": [
          {
            "event": "input",
            "guard": "ch != '#' and ch != ' '",
            "action": "add_to_buffer(ch)",
            "target": "# # space chapter"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # # space",
        "transactions": [
          {
            "event": "input",
            "guard": "ch != '#' and ch != ' '",
            "action": "add_to_buffer(ch)",
            "target": "# # # space section"
          },
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# space title",
        "transactions": [
          {
            "event": "eol",
            "target": "init"
          },
          {
            "event": "eof",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # space chapter",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "action": "add_to_buffer(ch)"
          },
          {
            "event": "input",
            "guard": "ch != '#' and ch != ' '",
            "action": "add_to_buffer(ch)"
          },
          {
            "event": "eol",
            "action": "add_chapter",
            "target": "init"
          },
          {
            "event": "eof",
            "action": "add_chapter",
            "target": "init"
          }
        ]
      },
      {
        "name": "# # # space section",
        "transactions": [
          {
            "event": "input",
            "guard": "ch == ' ' or ch == '\\t'",
            "action": "add_to_buffer(ch)"
          },
          {
            "event": "input",
            "guard": "ch != '#' and ch != ' '",
            "action": "add_to_buffer(ch)"
          },
          {
            "event": "eol",
            "action": "add_section",
            "target": "init"
          },
          {
            "event": "eof",
            "action": "add_section",
            "target": "init"
          }
        ]
      }
    ]
  }
#+end_src
*** basic
#+begin_src python :noweb-ref importer
  <<parse-events>>
  <<parse-states>>
  def load(src: str) -> List[Event]:
    with open(src, 'r') as f:
      data = json.loads(f.read())
      events = _parse_events(data['events'])
      states = _parse_states(data['states'], events)
      return states
#+end_src
*** parse events
#+begin_src python :noweb-ref parse-events
  <<verify-parameter>>
  <<verify-event>>
  def _parse_events(data: Mapping[str, str]) -> List[Event]:
    events = []
    for e in data:
      event = Event()
      for (k, v) in e.items():
        if k == 'name':
          event.name = v
        elif k == 'parameters':
          for p in v:
            parameter = Parameter()
            for (kk, vv) in p.items():
              if kk == 'name':
                parameter.name = vv
              elif kk == 'type':
                parameter.type = vv
              elif kk == 'default':
                parameter.default = vv
            event.parameters.append(_verify_parameter(parameter, p))
      events.append(_verify_event(event, e))
    return events
#+end_src
**** verify-parameter
#+begin_src python :noweb-ref verify-parameter
  def _verify_parameter(p: Parameter, d: Mapping[str, str]) -> Parameter:
    if not p.name:
      print('Missing name in parameter: %s' % json.dumps(d))
      exit(1)
    if not p.type:
      print('Missing type in parameter: %s' % json.dumps(d))
      exit(1)
    return p
#+end_src
**** verify-event
#+begin_src python :noweb-ref verify-event
  def _verify_event(e: Event, d: Mapping[str, str]) -> Event:
    if not e.name:
      print('Missing name in event: %s' % json.dumps(d))
      exit(1)
    else:
      return e
#+end_src
*** parse states
#+begin_src python :noweb-ref parse-states
  <<parse-transactions>>
  <<verify-transaction>>
  def _parse_states(data: Mapping[str, str], events: List[Event]) -> List[State]:
    states = []
    for s in data:
      state = State()
      for (k, v) in s.items():
        if k == 'name':
          state.name = v
        elif k == 'transactions':
          state.transactions = _parse_transactions(v, events)
        elif k == 'states':
          state.substates = _parse_states(v)
      states.append(state)
    for state in states:
      for t in state.transactions:
        _verify_transaction(t, states, events)
    return states
#+end_src
*** parse transactions
#+begin_src python :noweb-ref parse-transactions
  def _parse_transactions(data: Mapping[str, str], events: List[Event]) -> List[Transaction]:
    transactions = []
    for t in data:
      transaction = Transaction()
      transaction._eventstr = None
      transaction._targetstr = None
      for (k, v) in t.items():
        if k == 'event':
          transaction._eventstr = v
        elif k == 'guard':
          transaction.guard = v
        elif k == 'action':
          actions = v.split('\n')
          for act in actions:
            action = Action()
            matched = re.search('(.*)\((.*)\)', act)
            if matched:
              action.name = matched[1]
              action._argumentstrs = [x.strip() for x in matched[2].split(',')]
            else:
              action.name = act
              action._argumentstrs = None
            transaction.actions.append(action)
        elif k == 'target':
          transaction._targetstr = v
      transactions.append(transaction)
    return transactions
#+end_src
**** verify transaction
#+begin_src python :noweb-ref verify-transaction
  def _verify_transaction(t: Transaction, states: List[State], events: List[Event]):
    if t._eventstr:
      for event in events:
        if event.name == t._eventstr:
          t.event = event
          break
      if not t.event:
        print('Undefined event: %s' % t._eventstr)
        exit(1)
    if t._targetstr:
      for state in states:
        if t._targetstr == state.name:
          t.target = state
          break
      if not t.target:
        print('Undefined target: %s' % t._targetstr)
        exit(1)
    if len(t.actions) > 0:
      for action in t.actions:
        if action._argumentstrs:
          args = []
          for arg in action._argumentstrs:
            found: bool = False
            for param in t.event.parameters:
              if arg == param.name:
                args.append(param)
                found = True
                break
            if not found:
              print('Undefined action arguments "%s" in action: %s' % (arg, action))
              exit(1)
          action.arguments = args
#+end_src
