#+STARTUP: indent
* JSON
** framework
#+begin_src python :tangle ${BUILDDIR}/jsonio.py
  from typing import List, Mapping, Tuple
  from model import Event, Parameter, State, Transition, Variable
  from semantic import Assignment, Call, Expression, Identifier
  from analyzer import ParameterSyntaxer, ParameterLexerAdapter, ActionSyntaxer, ActionLexerAdapter, GuardSyntaxer, GuardLexerAdapter
  from lexer import Lexer
  import json

  <<importer>>
  <<exporter>>
#+end_src
** importer
*** basic
#+begin_src python :noweb-ref importer
  <<parse-variables>>

  <<parse-events>>

  <<parse-states>>

  def load(src: str) -> Tuple[List[Variable], List[State]]:
    with open(src, 'r') as f:
      data = json.loads(f.read())
      if 'variables' in data:
        variables = _parse_variables(data['variables'])
      else:
        variables = []
      events = _parse_events(data['events'])
      states = _parse_states(data['states'], variables, events)
      return (variables, states)
#+end_src
*** parse variables
#+begin_src python :noweb-ref parse-variables
  <<verify-variable>>

  def _parse_variables(data: Mapping[str, str]) -> List[Variable]:
    variables = []
    for v in data:
      variable = Variable()
      for (k, v) in v.items():
        if k == 'name':
          variable.name = v
        elif k == 'type':
          variable.type = v
      variables.append(_verify_variable(variable, v))
    return variables
#+end_src
**** verify-variable
#+begin_src python :noweb-ref verify-variable
  def _verify_variable(v: Variable, d: Mapping[str, str]) -> Variable:
    if not v.name:
      print('Missing name in variable: %s' % json.dumps(d))
      exit(1)
    if not v.type:
      print('Missing type in variable: %s' % json.dumps(d))
      exit(1)
    return v
#+end_src
*** parse events
#+begin_src python :noweb-ref parse-events
  <<verify-parameter>>
  <<verify-event>>
  def _parse_events(data: Mapping[str, str]) -> List[Event]:
    events = []
    for e in data:
      event = Event()
      for (k, v) in e.items():
        if k == 'name':
          event.name = v
        elif k == 'parameters':
          for p in v:
            parameter = Parameter()
            for (kk, vv) in p.items():
              if kk == 'name':
                parameter.name = vv
              elif kk == 'type':
                parameter.type = vv
            event.parameters.append(_verify_parameter(parameter, p))
      events.append(_verify_event(event, e))
    return events
#+end_src
**** verify-parameter
#+begin_src python :noweb-ref verify-parameter
  def _verify_parameter(p: Parameter, d: Mapping[str, str]) -> Parameter:
    if not p.name:
      print('Missing name in parameter: %s' % json.dumps(d))
      exit(1)
    if not p.type:
      print('Missing type in parameter: %s' % json.dumps(d))
      exit(1)
    return p
#+end_src
**** verify-event
#+begin_src python :noweb-ref verify-event
  def _verify_event(e: Event, d: Mapping[str, str]) -> Event:
    if not e.name:
      print('Missing name in event: %s' % json.dumps(d))
      exit(1)
    else:
      return e
#+end_src
*** parse states
#+begin_src python :noweb-ref parse-states
  <<parse-transitions>>
  <<verify-transition>>
  def _parse_states(data: Mapping[str, str], variables: List[Variable], events: List[Event]) -> List[State]:
    states = []
    for s in data:
      state = State()
      for (k, v) in s.items():
        if k == 'name':
          state.name = v
        elif k == 'transitions':
          state.transitions = _parse_transitions(v, variables)
        elif k == 'states':
          state.substates = _parse_states(v)
      states.append(state)
    for state in states:
      for t in state.transitions:
        _verify_transition(t, states, variables, events)
    return states
#+end_src
*** parse transitions
#+begin_src python :noweb-ref parse-transitions
  def _parse_transitions(data: Mapping[str, str], variables: List[Variable]) -> List[Transition]:
    transitions = []
    for t in data:
      transition = Transition()
      transition._eventstr = None
      transition._targetstr = None
      for (k, v) in t.items():
        if k == 'event':
          transition._eventstr = v
        elif k == 'guard':
          syntaxer = GuardSyntaxer()
          lexer = Lexer(GuardLexerAdapter(syntaxer))
          for ch in v:
            lexer.feed(ch)
          lexer.eof()
          syntaxer.eof()
          transition.guard = syntaxer.result()
        elif k == 'actions':
          actions = v
          for action in actions:
            syntaxer = ActionSyntaxer()
            lexer = Lexer(ActionLexerAdapter(syntaxer))
            for ch in action:
              lexer.feed(ch)
            lexer.eof()
            syntaxer.eof()
            transition.actions.append(syntaxer.result())
            if isinstance(syntaxer.result(), Assignment):
              assignment = syntaxer.result()
              found = False
              for var in variables:
                if var.name == str(assignment.target):
                  found = True
                  assignment.type = Identifier(var.type)
                  if isinstance(assignment.expression, Call):
                    assignment.expression.type = assignment.type
              if not found:
                print('Variable %s in action "%s" not found' % (str(assignment.target), str(assignment)))
                exit(1)
        elif k == 'target':
          transition._targetstr = v
      transitions.append(transition)
    return transitions
#+end_src
**** verify transition
#+begin_src python :noweb-ref verify-transition
  def _verify_transition(t: Transition, states: List[State], variables: List[Variable], events: List[Event]):
    if t._eventstr:
      for event in events:
        if event.name == t._eventstr:
          t.event = event
          break
      if not t.event:
        print('Undefined event: %s' % t._eventstr)
        exit(1)
    if t._targetstr:
      for state in states:
        if t._targetstr == state.name:
          t.target = state
          break
      if not t.target:
        print('Undefined target: %s' % t._targetstr)
        exit(1)
    if len(t.actions) > 0:
      for action in t.actions:
        if isinstance(action, Assignment):
          found: bool = False
          for var in variables:
            if var.name == action.target.name:
              found = True
              break
          if not found:
            print('Undefined variable "%s" in action: %s' % (action.target.name, action))
        elif isinstance(action, Call):
          for arg in action.operands:
            found: bool = False
            for param in t.event.parameters:
              if str(arg) == str(param.name):
                found = True
                break
            if not found:
              print('Undefined action arguments "%s" in action: %s' % (arg, action))
              exit(1)
#+end_src
** exporter
*** basic
#+begin_src python :noweb-ref exporter
  <<json-encoder>>
  def save(dst: str, variables: List[Variable], states: List[State], args):
    events = {}
    for state in states:
      for transition in state.transitions:
        events[str(transition.event)] = transition.event
    data = {'variables': variables, 'events': [x for x in events.values()], 'states': states}
    with open(dst, 'w') as f:
      f.write(json.dumps(data, cls=ModelJSONEncoder, indent=2))
#+end_src
*** JSON Encoder
#+begin_src python :noweb-ref json-encoder
  class ModelJSONEncoder(json.JSONEncoder):
    def default(self, obj):
      if isinstance(obj, Variable):
        return { 'name': obj.name, 'type': obj.type }
      if isinstance(obj, Event):
        data = { 'name': obj.name }
        if len(obj.parameters) > 0:
          data['parameters'] = obj.parameters
        return data
      if isinstance(obj, Parameter):
        data = { 'name': str(obj.name), 'type': str(obj.type) }
        return data
      if isinstance(obj, State):
        return { 'name': obj.name, 'transitions': obj.transitions }
      if isinstance(obj, Transition):
        data = {}
        if len(obj.actions) > 0:
          actions = []
          for action in obj.actions:
            if isinstance(action, Assignment):
              actions.append('%s = %s' % (str(action.target), str(action.expression).replace('()', '')))
            elif isinstance(action, Call):
              if len(action.operands) > 0:
                actions.append(str(action))
              elif len(str(action.operator)) > 0:
                actions.append(str(action.operator))
          if len(actions) > 0:
            data['actions'] = actions
        if obj.event:
          data['event'] = obj.event.name
        if obj.guard:
          data['guard'] = str(obj.guard)
        if obj.target:
          data['target'] = obj.target.name
        return data
      # Let the base class default method raise the TypeError
      return json.JSONEncoder.default(self, obj)
#+end_src
