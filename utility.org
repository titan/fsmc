#+STARTUP: indent
* Utility
** framework
#+begin_src python :tangle ${BUILDDIR}/utility.py
  from typing import List, Mapping, Set, Tuple, Union
  from model import Event, Parameter, State, Transition, Variable
  from semantic import Assignment, Call, Identifier, Literal, CompareExpression, Expression, BoolExpression, BinaryBoolExpression, UnaryBoolExpression

  <<normalize>>
  <<lifts>>
#+end_src
** normalize
#+begin_src python :noweb-ref normalize
  def normalize(string):
    mappings = {}
    #mappings['_'] = '_UNDERLINE_'
    mappings['!='] = '_NOT_EQUAL_TO_'
    mappings[':='] = '_ASSIGN_TO_'
    mappings['=='] = '_DOUBLE_EQUALS_'
    mappings['>='] = '_GREATER_THAN_OR_EQUAL_TO_'
    mappings['<='] = '_LESS_THAN_OR_EQUAL_TO_'
    mappings['='] = '_EQUALS_'
    mappings['+'] = '_PLUS_'
    mappings['-'] = '_MINUS_'
    mappings['>'] = '_GREATER_THAN_'
    mappings['<'] = '_LESS_THAN_'
    mappings['('] = '_OPEN_PARENTHESIS_'
    mappings[')'] = '_CLOSE_PARENTHESIS_'
    mappings['['] = '_OPEN_BRACKET_'
    mappings[']'] = '_CLOSE_BRACKET_'
    mappings['{'] = '_OPEN_BRACE_'
    mappings['}'] = '_CLOSE_BRACE_'
    mappings[':'] = '_COLON_'
    mappings[','] = '_COMMA_'
    mappings[';'] = '_SEMI_COLON_'
    mappings['"'] = '_QUOTES_'
    mappings["'"] = '_APOSTROPHE_'
    mappings['.'] = '_DOT_'
    mappings['Â·'] = '_MIDDOT_'
    mappings['?'] = '_QUESTION_'
    mappings['%'] = '_PERCENT_'
    mappings['$'] = '_DOLLAR_'
    mappings[' '] = '_'
    mappings['\n'] = '_NEWLINE_'
    mappings['#'] = '_SHARP_'
    mappings['*'] = '_ASTERISK_'
    mappings['\\'] = '_BACKSLASH_'
    mappings['|'] = '_PIPE_'
    mappings['!'] = '_EXCLAM_'
    mappings['/'] = '_SLASH_'
    for (k, v) in mappings.items():
      string = string.replace(k, v)

    result = string.replace(' ', '_').replace('__', '_').replace('__', '_').upper()

    if result.startswith('_'):
      result = result[1:]
    if result.endswith('_'):
      result = result[:-1]
    if len(result) > 0 and result[0].isdigit():
      result = "NUMBER_" + result
    return result
#+end_src
** lifts
#+begin_src python :noweb-ref lifts
  def lift_action_callnames(actions: List[Union[Assignment, Call]], normalizer = None) -> List[str]:
    result = []
    for action in actions:
      if isinstance(action, Call):
        result.append(str(action.operator))
      elif isinstance(action, Assignment) and isinstance(action.expression, Call):
        result.append(str(action.expression.operator))
    return [normalizer(x) for x in result] if normalizer != None else result

  def lift_variable_names(actions: List[Union[Assignment, Call]], normalizer = None) -> List[str]:
    result = []
    for action in actions:
      if isinstance(action, Assignment):
        result.append(str(action.target.name).lower())
    return [normalizer(x) for x in result] if normalizer != None else result

  def lift_guard_call(expr: Expression, event: Event) -> Set[Union[Call, Identifier]]:
    if isinstance(expr, Expression):
      if isinstance(expr, CompareExpression):
        return lift_guard_call(expr.left, event) or lift_guard_call(expr.right, event)
      elif isinstance(expr, BinaryBoolExpression):
        return lift_guard_call(expr.left, event) or lift_guard_call(expr.right, event)
      elif isinstance(expr, UnaryBoolExpression):
        return lift_guard_call(expr.expr, event)
      elif isinstance(expr, BoolExpression):
        return lift_guard_call(expr.expr, event)
      elif isinstance(expr.entity, Call):
        result = set()
        result.add(expr.entity)
        return result
      elif isinstance(expr.entity, Identifier):
        if str(expr.entity) in [str(x.name) for x in event.parameters]:
          return set()
        else:
          result = set()
          result.add(expr.entity)
          return result
      else:
        return set()
    else:
      return set()

  def lift_guard_callnames(guard: BoolExpression, event: Event, normalizer = None) -> List[str]:
    result = [x for x in lift_guard_call(guard, event)]
    return [normalizer(x) for x in result] if normalizer != None else result

  def lift_current_states(event: Event, states: List[State]) -> List[State]:
    result = []
    for state in states:
      for transition in state.transitions:
        if transition == None:
          continue
        if transition.event.name == event.name:
          result.append(state)
    return result

  def lift_target_states(event: Event, state: State) -> List[State]:
    result = []
    for transition in state.transitions:
      if transition == None:
        continue
      if transition.event.name == event.name:
        result.append(transition.target if transition.target != None else state)
    return result

  def lift_transition_states(transition: Transition, states: List[State]) -> Tuple[State, State]:
    for state in states:
      for tran in state.transitions:
        if tran == transition:
          return (state, tran.target)
    return (None, None)

  def lift_event_states(event: Event, guard: BoolExpression, states: List[State]) -> List[Tuple[State, State]]:
    result = []
    for state in states:
      for transition in state.transitions:
        if transition == None:
          continue
        if transition.event == event and transition.guard == guard:
          result.append((state, transition.target))
    return result
#+end_src
